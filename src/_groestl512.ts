import { exists, output } from './_assert.js';
import { Hash, Input } from './utils.js';

class u64 {
  hi: number;
  lo: number;

  constructor(h: number, l: number) {
    this.hi = h >>> 0;
    this.lo = l >>> 0;
  }

  plus(oWord: u64): u64 {
    let lowest: number, lowMid: number, highMid: number, highest: number;
    lowest = (this.lo & 0xffff) + (oWord.lo & 0xffff);
    lowMid = (this.lo >>> 16) + (oWord.lo >>> 16) + (lowest >>> 16);
    highMid = (this.hi & 0xffff) + (oWord.hi & 0xffff) + (lowMid >>> 16);
    highest = (this.hi >>> 16) + (oWord.hi >>> 16) + (highMid >>> 16);

    let c = new u64(0, 0);
    c.lo = (lowMid << 16) | (lowest & 0xffff);
    c.hi = (highest << 16) | (highMid & 0xffff);

    return c;
  }

  setShiftLeft(bits: number): u64 {
    if (bits === 0) {
      return this;
    }
    if (bits > 63) {
      bits %= 64;
    }
    if (bits > 31) {
      this.hi = this.lo << (bits - 32);
      this.lo = 0;
    } else {
      const toMoveUp = this.lo >>> (32 - bits);
      this.lo <<= bits;
      this.hi = (this.hi << bits) | toMoveUp;
    }
    return this;
  }

  setxor64(...args: u64[]): u64 {
    args.forEach((arg) => {
      this.hi ^= arg.hi;
      this.lo ^= arg.lo;
    });

    return this;
  }

  addOne(): void {
    if (this.lo === -1 || this.lo === 0xffffffff) {
      this.lo = 0;
      this.hi++;
    } else {
      this.lo++;
    }
  }

  clone(): u64 {
    return new u64(this.hi, this.lo);
  }

  xor(oWord: u64): u64 {
    const result = new u64(0, 0);
    result.hi = this.hi ^ oWord.hi;
    result.lo = this.lo ^ oWord.lo;
    return result;
  }
}

function u(h: number, l: number): u64 {
  return new u64(h, l);
}

function xor64(...args: u64[]): u64 {
  let h: number = args[0].hi;
  let l: number = args[0].lo;
  let i: number = args.length - 1;

  do {
    h ^= args[i].hi;
    l ^= args[i].lo;
    i--;
  } while (i > 0);

  return new u64(h, l);
}

export class GroestlContext {
  public state: Array<u64>;
  public ptr: number;
  public count: u64;
  public buffer: Array<u64>;

  constructor() {
    this.state = new Array(16);
    for (let i = 0; i < 15; i++) {
      this.state[i] = new u64(0, 0);
    }
    this.state[15] = new u64(0, 512);
    this.ptr = 0;
    this.count = new u64(0, 0);
    this.buffer = new Array(128);
  }
}

function bytes2Int64Buffer(b: any) {
  if (!b) return [];
  const len = b.length ? ((b.length - 1) >>> 3) + 1 : 0;
  const buffer = new Array(len);
  let j = 0;
  while (j < len) {
    buffer[j] = new u64(
      (b[j * 8] << 24) | (b[j * 8 + 1] << 16) | (b[j * 8 + 2] << 8) | b[j * 8 + 3],
      (b[j * 8 + 4] << 24) | (b[j * 8 + 5] << 16) | (b[j * 8 + 6] << 8) | b[j * 8 + 7]
    );
    j++;
  }
  return buffer;
}

function bufferEncode64(buffer: any, offset: number, uint64: u64): void {
  buffer[offset] = uint64.hi >>> 24;
  buffer[offset + 1] = (uint64.hi >>> 16) & 0xff;
  buffer[offset + 2] = (uint64.hi >>> 8) & 0xff;
  buffer[offset + 3] = uint64.hi & 0xff;
  buffer[offset + 4] = uint64.lo >>> 24;
  buffer[offset + 5] = (uint64.lo >>> 16) & 0xff;
  buffer[offset + 6] = (uint64.lo >>> 8) & 0xff;
  buffer[offset + 7] = uint64.lo & 0xff;
}

const T0 = [
  u(0xc632f4a5, 0xf497a5c6),
  u(0xf86f9784, 0x97eb84f8),
  u(0xee5eb099, 0xb0c799ee),
  u(0xf67a8c8d, 0x8cf78df6),
  u(0xffe8170d, 0x17e50dff),
  u(0xd60adcbd, 0xdcb7bdd6),
  u(0xde16c8b1, 0xc8a7b1de),
  u(0x916dfc54, 0xfc395491),
  u(0x6090f050, 0xf0c05060),
  u(0x02070503, 0x05040302),
  u(0xce2ee0a9, 0xe087a9ce),
  u(0x56d1877d, 0x87ac7d56),
  u(0xe7cc2b19, 0x2bd519e7),
  u(0xb513a662, 0xa67162b5),
  u(0x4d7c31e6, 0x319ae64d),
  u(0xec59b59a, 0xb5c39aec),
  u(0x8f40cf45, 0xcf05458f),
  u(0x1fa3bc9d, 0xbc3e9d1f),
  u(0x8949c040, 0xc0094089),
  u(0xfa689287, 0x92ef87fa),
  u(0xefd03f15, 0x3fc515ef),
  u(0xb29426eb, 0x267febb2),
  u(0x8ece40c9, 0x4007c98e),
  u(0xfbe61d0b, 0x1ded0bfb),
  u(0x416e2fec, 0x2f82ec41),
  u(0xb31aa967, 0xa97d67b3),
  u(0x5f431cfd, 0x1cbefd5f),
  u(0x456025ea, 0x258aea45),
  u(0x23f9dabf, 0xda46bf23),
  u(0x535102f7, 0x02a6f753),
  u(0xe445a196, 0xa1d396e4),
  u(0x9b76ed5b, 0xed2d5b9b),
  u(0x75285dc2, 0x5deac275),
  u(0xe1c5241c, 0x24d91ce1),
  u(0x3dd4e9ae, 0xe97aae3d),
  u(0x4cf2be6a, 0xbe986a4c),
  u(0x6c82ee5a, 0xeed85a6c),
  u(0x7ebdc341, 0xc3fc417e),
  u(0xf5f30602, 0x06f102f5),
  u(0x8352d14f, 0xd11d4f83),
  u(0x688ce45c, 0xe4d05c68),
  u(0x515607f4, 0x07a2f451),
  u(0xd18d5c34, 0x5cb934d1),
  u(0xf9e11808, 0x18e908f9),
  u(0xe24cae93, 0xaedf93e2),
  u(0xab3e9573, 0x954d73ab),
  u(0x6297f553, 0xf5c45362),
  u(0x2a6b413f, 0x41543f2a),
  u(0x081c140c, 0x14100c08),
  u(0x9563f652, 0xf6315295),
  u(0x46e9af65, 0xaf8c6546),
  u(0x9d7fe25e, 0xe2215e9d),
  u(0x30487828, 0x78602830),
  u(0x37cff8a1, 0xf86ea137),
  u(0x0a1b110f, 0x11140f0a),
  u(0x2febc4b5, 0xc45eb52f),
  u(0x0e151b09, 0x1b1c090e),
  u(0x247e5a36, 0x5a483624),
  u(0x1badb69b, 0xb6369b1b),
  u(0xdf98473d, 0x47a53ddf),
  u(0xcda76a26, 0x6a8126cd),
  u(0x4ef5bb69, 0xbb9c694e),
  u(0x7f334ccd, 0x4cfecd7f),
  u(0xea50ba9f, 0xbacf9fea),
  u(0x123f2d1b, 0x2d241b12),
  u(0x1da4b99e, 0xb93a9e1d),
  u(0x58c49c74, 0x9cb07458),
  u(0x3446722e, 0x72682e34),
  u(0x3641772d, 0x776c2d36),
  u(0xdc11cdb2, 0xcda3b2dc),
  u(0xb49d29ee, 0x2973eeb4),
  u(0x5b4d16fb, 0x16b6fb5b),
  u(0xa4a501f6, 0x0153f6a4),
  u(0x76a1d74d, 0xd7ec4d76),
  u(0xb714a361, 0xa37561b7),
  u(0x7d3449ce, 0x49face7d),
  u(0x52df8d7b, 0x8da47b52),
  u(0xdd9f423e, 0x42a13edd),
  u(0x5ecd9371, 0x93bc715e),
  u(0x13b1a297, 0xa2269713),
  u(0xa6a204f5, 0x0457f5a6),
  u(0xb901b868, 0xb86968b9),
  u(0x00000000, 0x00000000),
  u(0xc1b5742c, 0x74992cc1),
  u(0x40e0a060, 0xa0806040),
  u(0xe3c2211f, 0x21dd1fe3),
  u(0x793a43c8, 0x43f2c879),
  u(0xb69a2ced, 0x2c77edb6),
  u(0xd40dd9be, 0xd9b3bed4),
  u(0x8d47ca46, 0xca01468d),
  u(0x671770d9, 0x70ced967),
  u(0x72afdd4b, 0xdde44b72),
  u(0x94ed79de, 0x7933de94),
  u(0x98ff67d4, 0x672bd498),
  u(0xb09323e8, 0x237be8b0),
  u(0x855bde4a, 0xde114a85),
  u(0xbb06bd6b, 0xbd6d6bbb),
  u(0xc5bb7e2a, 0x7e912ac5),
  u(0x4f7b34e5, 0x349ee54f),
  u(0xedd73a16, 0x3ac116ed),
  u(0x86d254c5, 0x5417c586),
  u(0x9af862d7, 0x622fd79a),
  u(0x6699ff55, 0xffcc5566),
  u(0x11b6a794, 0xa7229411),
  u(0x8ac04acf, 0x4a0fcf8a),
  u(0xe9d93010, 0x30c910e9),
  u(0x040e0a06, 0x0a080604),
  u(0xfe669881, 0x98e781fe),
  u(0xa0ab0bf0, 0x0b5bf0a0),
  u(0x78b4cc44, 0xccf04478),
  u(0x25f0d5ba, 0xd54aba25),
  u(0x4b753ee3, 0x3e96e34b),
  u(0xa2ac0ef3, 0x0e5ff3a2),
  u(0x5d4419fe, 0x19bafe5d),
  u(0x80db5bc0, 0x5b1bc080),
  u(0x0580858a, 0x850a8a05),
  u(0x3fd3ecad, 0xec7ead3f),
  u(0x21fedfbc, 0xdf42bc21),
  u(0x70a8d848, 0xd8e04870),
  u(0xf1fd0c04, 0x0cf904f1),
  u(0x63197adf, 0x7ac6df63),
  u(0x772f58c1, 0x58eec177),
  u(0xaf309f75, 0x9f4575af),
  u(0x42e7a563, 0xa5846342),
  u(0x20705030, 0x50403020),
  u(0xe5cb2e1a, 0x2ed11ae5),
  u(0xfdef120e, 0x12e10efd),
  u(0xbf08b76d, 0xb7656dbf),
  u(0x8155d44c, 0xd4194c81),
  u(0x18243c14, 0x3c301418),
  u(0x26795f35, 0x5f4c3526),
  u(0xc3b2712f, 0x719d2fc3),
  u(0xbe8638e1, 0x3867e1be),
  u(0x35c8fda2, 0xfd6aa235),
  u(0x88c74fcc, 0x4f0bcc88),
  u(0x2e654b39, 0x4b5c392e),
  u(0x936af957, 0xf93d5793),
  u(0x55580df2, 0x0daaf255),
  u(0xfc619d82, 0x9de382fc),
  u(0x7ab3c947, 0xc9f4477a),
  u(0xc827efac, 0xef8bacc8),
  u(0xba8832e7, 0x326fe7ba),
  u(0x324f7d2b, 0x7d642b32),
  u(0xe642a495, 0xa4d795e6),
  u(0xc03bfba0, 0xfb9ba0c0),
  u(0x19aab398, 0xb3329819),
  u(0x9ef668d1, 0x6827d19e),
  u(0xa322817f, 0x815d7fa3),
  u(0x44eeaa66, 0xaa886644),
  u(0x54d6827e, 0x82a87e54),
  u(0x3bdde6ab, 0xe676ab3b),
  u(0x0b959e83, 0x9e16830b),
  u(0x8cc945ca, 0x4503ca8c),
  u(0xc7bc7b29, 0x7b9529c7),
  u(0x6b056ed3, 0x6ed6d36b),
  u(0x286c443c, 0x44503c28),
  u(0xa72c8b79, 0x8b5579a7),
  u(0xbc813de2, 0x3d63e2bc),
  u(0x1631271d, 0x272c1d16),
  u(0xad379a76, 0x9a4176ad),
  u(0xdb964d3b, 0x4dad3bdb),
  u(0x649efa56, 0xfac85664),
  u(0x74a6d24e, 0xd2e84e74),
  u(0x1436221e, 0x22281e14),
  u(0x92e476db, 0x763fdb92),
  u(0x0c121e0a, 0x1e180a0c),
  u(0x48fcb46c, 0xb4906c48),
  u(0xb88f37e4, 0x376be4b8),
  u(0x9f78e75d, 0xe7255d9f),
  u(0xbd0fb26e, 0xb2616ebd),
  u(0x43692aef, 0x2a86ef43),
  u(0xc435f1a6, 0xf193a6c4),
  u(0x39dae3a8, 0xe372a839),
  u(0x31c6f7a4, 0xf762a431),
  u(0xd38a5937, 0x59bd37d3),
  u(0xf274868b, 0x86ff8bf2),
  u(0xd5835632, 0x56b132d5),
  u(0x8b4ec543, 0xc50d438b),
  u(0x6e85eb59, 0xebdc596e),
  u(0xda18c2b7, 0xc2afb7da),
  u(0x018e8f8c, 0x8f028c01),
  u(0xb11dac64, 0xac7964b1),
  u(0x9cf16dd2, 0x6d23d29c),
  u(0x49723be0, 0x3b92e049),
  u(0xd81fc7b4, 0xc7abb4d8),
  u(0xacb915fa, 0x1543faac),
  u(0xf3fa0907, 0x09fd07f3),
  u(0xcfa06f25, 0x6f8525cf),
  u(0xca20eaaf, 0xea8fafca),
  u(0xf47d898e, 0x89f38ef4),
  u(0x476720e9, 0x208ee947),
  u(0x10382818, 0x28201810),
  u(0x6f0b64d5, 0x64ded56f),
  u(0xf0738388, 0x83fb88f0),
  u(0x4afbb16f, 0xb1946f4a),
  u(0x5cca9672, 0x96b8725c),
  u(0x38546c24, 0x6c702438),
  u(0x575f08f1, 0x08aef157),
  u(0x732152c7, 0x52e6c773),
  u(0x9764f351, 0xf3355197),
  u(0xcbae6523, 0x658d23cb),
  u(0xa125847c, 0x84597ca1),
  u(0xe857bf9c, 0xbfcb9ce8),
  u(0x3e5d6321, 0x637c213e),
  u(0x96ea7cdd, 0x7c37dd96),
  u(0x611e7fdc, 0x7fc2dc61),
  u(0x0d9c9186, 0x911a860d),
  u(0x0f9b9485, 0x941e850f),
  u(0xe04bab90, 0xabdb90e0),
  u(0x7cbac642, 0xc6f8427c),
  u(0x712657c4, 0x57e2c471),
  u(0xcc29e5aa, 0xe583aacc),
  u(0x90e373d8, 0x733bd890),
  u(0x06090f05, 0x0f0c0506),
  u(0xf7f40301, 0x03f501f7),
  u(0x1c2a3612, 0x3638121c),
  u(0xc23cfea3, 0xfe9fa3c2),
  u(0x6a8be15f, 0xe1d45f6a),
  u(0xaebe10f9, 0x1047f9ae),
  u(0x69026bd0, 0x6bd2d069),
  u(0x17bfa891, 0xa82e9117),
  u(0x9971e858, 0xe8295899),
  u(0x3a536927, 0x6974273a),
  u(0x27f7d0b9, 0xd04eb927),
  u(0xd9914838, 0x48a938d9),
  u(0xebde3513, 0x35cd13eb),
  u(0x2be5ceb3, 0xce56b32b),
  u(0x22775533, 0x55443322),
  u(0xd204d6bb, 0xd6bfbbd2),
  u(0xa9399070, 0x904970a9),
  u(0x07878089, 0x800e8907),
  u(0x33c1f2a7, 0xf266a733),
  u(0x2decc1b6, 0xc15ab62d),
  u(0x3c5a6622, 0x6678223c),
  u(0x15b8ad92, 0xad2a9215),
  u(0xc9a96020, 0x608920c9),
  u(0x875cdb49, 0xdb154987),
  u(0xaab01aff, 0x1a4fffaa),
  u(0x50d88878, 0x88a07850),
  u(0xa52b8e7a, 0x8e517aa5),
  u(0x03898a8f, 0x8a068f03),
  u(0x594a13f8, 0x13b2f859),
  u(0x09929b80, 0x9b128009),
  u(0x1a233917, 0x3934171a),
  u(0x651075da, 0x75cada65),
  u(0xd7845331, 0x53b531d7),
  u(0x84d551c6, 0x5113c684),
  u(0xd003d3b8, 0xd3bbb8d0),
  u(0x82dc5ec3, 0x5e1fc382),
  u(0x29e2cbb0, 0xcb52b029),
  u(0x5ac39977, 0x99b4775a),
  u(0x1e2d3311, 0x333c111e),
  u(0x7b3d46cb, 0x46f6cb7b),
  u(0xa8b71ffc, 0x1f4bfca8),
  u(0x6d0c61d6, 0x61dad66d),
  u(0x2c624e3a, 0x4e583a2c),
];

const T1 = [
  u(0xc6c632f4, 0xa5f497a5),
  u(0xf8f86f97, 0x8497eb84),
  u(0xeeee5eb0, 0x99b0c799),
  u(0xf6f67a8c, 0x8d8cf78d),
  u(0xffffe817, 0xd17e50d),
  u(0xd6d60adc, 0xbddcb7bd),
  u(0xdede16c8, 0xb1c8a7b1),
  u(0x91916dfc, 0x54fc3954),
  u(0x606090f0, 0x50f0c050),
  u(0x2020705, 0x3050403),
  u(0xcece2ee0, 0xa9e087a9),
  u(0x5656d187, 0x7d87ac7d),
  u(0xe7e7cc2b, 0x192bd519),
  u(0xb5b513a6, 0x62a67162),
  u(0x4d4d7c31, 0xe6319ae6),
  u(0xecec59b5, 0x9ab5c39a),
  u(0x8f8f40cf, 0x45cf0545),
  u(0x1f1fa3bc, 0x9dbc3e9d),
  u(0x898949c0, 0x40c00940),
  u(0xfafa6892, 0x8792ef87),
  u(0xefefd03f, 0x153fc515),
  u(0xb2b29426, 0xeb267feb),
  u(0x8e8ece40, 0xc94007c9),
  u(0xfbfbe61d, 0xb1ded0b),
  u(0x41416e2f, 0xec2f82ec),
  u(0xb3b31aa9, 0x67a97d67),
  u(0x5f5f431c, 0xfd1cbefd),
  u(0x45456025, 0xea258aea),
  u(0x2323f9da, 0xbfda46bf),
  u(0x53535102, 0xf702a6f7),
  u(0xe4e445a1, 0x96a1d396),
  u(0x9b9b76ed, 0x5bed2d5b),
  u(0x7575285d, 0xc25deac2),
  u(0xe1e1c524, 0x1c24d91c),
  u(0x3d3dd4e9, 0xaee97aae),
  u(0x4c4cf2be, 0x6abe986a),
  u(0x6c6c82ee, 0x5aeed85a),
  u(0x7e7ebdc3, 0x41c3fc41),
  u(0xf5f5f306, 0x206f102),
  u(0x838352d1, 0x4fd11d4f),
  u(0x68688ce4, 0x5ce4d05c),
  u(0x51515607, 0xf407a2f4),
  u(0xd1d18d5c, 0x345cb934),
  u(0xf9f9e118, 0x818e908),
  u(0xe2e24cae, 0x93aedf93),
  u(0xabab3e95, 0x73954d73),
  u(0x626297f5, 0x53f5c453),
  u(0x2a2a6b41, 0x3f41543f),
  u(0x8081c14, 0xc14100c),
  u(0x959563f6, 0x52f63152),
  u(0x4646e9af, 0x65af8c65),
  u(0x9d9d7fe2, 0x5ee2215e),
  u(0x30304878, 0x28786028),
  u(0x3737cff8, 0xa1f86ea1),
  u(0xa0a1b11, 0xf11140f),
  u(0x2f2febc4, 0xb5c45eb5),
  u(0xe0e151b, 0x91b1c09),
  u(0x24247e5a, 0x365a4836),
  u(0x1b1badb6, 0x9bb6369b),
  u(0xdfdf9847, 0x3d47a53d),
  u(0xcdcda76a, 0x266a8126),
  u(0x4e4ef5bb, 0x69bb9c69),
  u(0x7f7f334c, 0xcd4cfecd),
  u(0xeaea50ba, 0x9fbacf9f),
  u(0x12123f2d, 0x1b2d241b),
  u(0x1d1da4b9, 0x9eb93a9e),
  u(0x5858c49c, 0x749cb074),
  u(0x34344672, 0x2e72682e),
  u(0x36364177, 0x2d776c2d),
  u(0xdcdc11cd, 0xb2cda3b2),
  u(0xb4b49d29, 0xee2973ee),
  u(0x5b5b4d16, 0xfb16b6fb),
  u(0xa4a4a501, 0xf60153f6),
  u(0x7676a1d7, 0x4dd7ec4d),
  u(0xb7b714a3, 0x61a37561),
  u(0x7d7d3449, 0xce49face),
  u(0x5252df8d, 0x7b8da47b),
  u(0xdddd9f42, 0x3e42a13e),
  u(0x5e5ecd93, 0x7193bc71),
  u(0x1313b1a2, 0x97a22697),
  u(0xa6a6a204, 0xf50457f5),
  u(0xb9b901b8, 0x68b86968),
  u(0x0, 0x0),
  u(0xc1c1b574, 0x2c74992c),
  u(0x4040e0a0, 0x60a08060),
  u(0xe3e3c221, 0x1f21dd1f),
  u(0x79793a43, 0xc843f2c8),
  u(0xb6b69a2c, 0xed2c77ed),
  u(0xd4d40dd9, 0xbed9b3be),
  u(0x8d8d47ca, 0x46ca0146),
  u(0x67671770, 0xd970ced9),
  u(0x7272afdd, 0x4bdde44b),
  u(0x9494ed79, 0xde7933de),
  u(0x9898ff67, 0xd4672bd4),
  u(0xb0b09323, 0xe8237be8),
  u(0x85855bde, 0x4ade114a),
  u(0xbbbb06bd, 0x6bbd6d6b),
  u(0xc5c5bb7e, 0x2a7e912a),
  u(0x4f4f7b34, 0xe5349ee5),
  u(0xededd73a, 0x163ac116),
  u(0x8686d254, 0xc55417c5),
  u(0x9a9af862, 0xd7622fd7),
  u(0x666699ff, 0x55ffcc55),
  u(0x1111b6a7, 0x94a72294),
  u(0x8a8ac04a, 0xcf4a0fcf),
  u(0xe9e9d930, 0x1030c910),
  u(0x4040e0a, 0x60a0806),
  u(0xfefe6698, 0x8198e781),
  u(0xa0a0ab0b, 0xf00b5bf0),
  u(0x7878b4cc, 0x44ccf044),
  u(0x2525f0d5, 0xbad54aba),
  u(0x4b4b753e, 0xe33e96e3),
  u(0xa2a2ac0e, 0xf30e5ff3),
  u(0x5d5d4419, 0xfe19bafe),
  u(0x8080db5b, 0xc05b1bc0),
  u(0x5058085, 0x8a850a8a),
  u(0x3f3fd3ec, 0xadec7ead),
  u(0x2121fedf, 0xbcdf42bc),
  u(0x7070a8d8, 0x48d8e048),
  u(0xf1f1fd0c, 0x40cf904),
  u(0x6363197a, 0xdf7ac6df),
  u(0x77772f58, 0xc158eec1),
  u(0xafaf309f, 0x759f4575),
  u(0x4242e7a5, 0x63a58463),
  u(0x20207050, 0x30504030),
  u(0xe5e5cb2e, 0x1a2ed11a),
  u(0xfdfdef12, 0xe12e10e),
  u(0xbfbf08b7, 0x6db7656d),
  u(0x818155d4, 0x4cd4194c),
  u(0x1818243c, 0x143c3014),
  u(0x2626795f, 0x355f4c35),
  u(0xc3c3b271, 0x2f719d2f),
  u(0xbebe8638, 0xe13867e1),
  u(0x3535c8fd, 0xa2fd6aa2),
  u(0x8888c74f, 0xcc4f0bcc),
  u(0x2e2e654b, 0x394b5c39),
  u(0x93936af9, 0x57f93d57),
  u(0x5555580d, 0xf20daaf2),
  u(0xfcfc619d, 0x829de382),
  u(0x7a7ab3c9, 0x47c9f447),
  u(0xc8c827ef, 0xacef8bac),
  u(0xbaba8832, 0xe7326fe7),
  u(0x32324f7d, 0x2b7d642b),
  u(0xe6e642a4, 0x95a4d795),
  u(0xc0c03bfb, 0xa0fb9ba0),
  u(0x1919aab3, 0x98b33298),
  u(0x9e9ef668, 0xd16827d1),
  u(0xa3a32281, 0x7f815d7f),
  u(0x4444eeaa, 0x66aa8866),
  u(0x5454d682, 0x7e82a87e),
  u(0x3b3bdde6, 0xabe676ab),
  u(0xb0b959e, 0x839e1683),
  u(0x8c8cc945, 0xca4503ca),
  u(0xc7c7bc7b, 0x297b9529),
  u(0x6b6b056e, 0xd36ed6d3),
  u(0x28286c44, 0x3c44503c),
  u(0xa7a72c8b, 0x798b5579),
  u(0xbcbc813d, 0xe23d63e2),
  u(0x16163127, 0x1d272c1d),
  u(0xadad379a, 0x769a4176),
  u(0xdbdb964d, 0x3b4dad3b),
  u(0x64649efa, 0x56fac856),
  u(0x7474a6d2, 0x4ed2e84e),
  u(0x14143622, 0x1e22281e),
  u(0x9292e476, 0xdb763fdb),
  u(0xc0c121e, 0xa1e180a),
  u(0x4848fcb4, 0x6cb4906c),
  u(0xb8b88f37, 0xe4376be4),
  u(0x9f9f78e7, 0x5de7255d),
  u(0xbdbd0fb2, 0x6eb2616e),
  u(0x4343692a, 0xef2a86ef),
  u(0xc4c435f1, 0xa6f193a6),
  u(0x3939dae3, 0xa8e372a8),
  u(0x3131c6f7, 0xa4f762a4),
  u(0xd3d38a59, 0x3759bd37),
  u(0xf2f27486, 0x8b86ff8b),
  u(0xd5d58356, 0x3256b132),
  u(0x8b8b4ec5, 0x43c50d43),
  u(0x6e6e85eb, 0x59ebdc59),
  u(0xdada18c2, 0xb7c2afb7),
  u(0x1018e8f, 0x8c8f028c),
  u(0xb1b11dac, 0x64ac7964),
  u(0x9c9cf16d, 0xd26d23d2),
  u(0x4949723b, 0xe03b92e0),
  u(0xd8d81fc7, 0xb4c7abb4),
  u(0xacacb915, 0xfa1543fa),
  u(0xf3f3fa09, 0x709fd07),
  u(0xcfcfa06f, 0x256f8525),
  u(0xcaca20ea, 0xafea8faf),
  u(0xf4f47d89, 0x8e89f38e),
  u(0x47476720, 0xe9208ee9),
  u(0x10103828, 0x18282018),
  u(0x6f6f0b64, 0xd564ded5),
  u(0xf0f07383, 0x8883fb88),
  u(0x4a4afbb1, 0x6fb1946f),
  u(0x5c5cca96, 0x7296b872),
  u(0x3838546c, 0x246c7024),
  u(0x57575f08, 0xf108aef1),
  u(0x73732152, 0xc752e6c7),
  u(0x979764f3, 0x51f33551),
  u(0xcbcbae65, 0x23658d23),
  u(0xa1a12584, 0x7c84597c),
  u(0xe8e857bf, 0x9cbfcb9c),
  u(0x3e3e5d63, 0x21637c21),
  u(0x9696ea7c, 0xdd7c37dd),
  u(0x61611e7f, 0xdc7fc2dc),
  u(0xd0d9c91, 0x86911a86),
  u(0xf0f9b94, 0x85941e85),
  u(0xe0e04bab, 0x90abdb90),
  u(0x7c7cbac6, 0x42c6f842),
  u(0x71712657, 0xc457e2c4),
  u(0xcccc29e5, 0xaae583aa),
  u(0x9090e373, 0xd8733bd8),
  u(0x606090f, 0x50f0c05),
  u(0xf7f7f403, 0x103f501),
  u(0x1c1c2a36, 0x12363812),
  u(0xc2c23cfe, 0xa3fe9fa3),
  u(0x6a6a8be1, 0x5fe1d45f),
  u(0xaeaebe10, 0xf91047f9),
  u(0x6969026b, 0xd06bd2d0),
  u(0x1717bfa8, 0x91a82e91),
  u(0x999971e8, 0x58e82958),
  u(0x3a3a5369, 0x27697427),
  u(0x2727f7d0, 0xb9d04eb9),
  u(0xd9d99148, 0x3848a938),
  u(0xebebde35, 0x1335cd13),
  u(0x2b2be5ce, 0xb3ce56b3),
  u(0x22227755, 0x33554433),
  u(0xd2d204d6, 0xbbd6bfbb),
  u(0xa9a93990, 0x70904970),
  u(0x7078780, 0x89800e89),
  u(0x3333c1f2, 0xa7f266a7),
  u(0x2d2decc1, 0xb6c15ab6),
  u(0x3c3c5a66, 0x22667822),
  u(0x1515b8ad, 0x92ad2a92),
  u(0xc9c9a960, 0x20608920),
  u(0x87875cdb, 0x49db1549),
  u(0xaaaab01a, 0xff1a4fff),
  u(0x5050d888, 0x7888a078),
  u(0xa5a52b8e, 0x7a8e517a),
  u(0x303898a, 0x8f8a068f),
  u(0x59594a13, 0xf813b2f8),
  u(0x909929b, 0x809b1280),
  u(0x1a1a2339, 0x17393417),
  u(0x65651075, 0xda75cada),
  u(0xd7d78453, 0x3153b531),
  u(0x8484d551, 0xc65113c6),
  u(0xd0d003d3, 0xb8d3bbb8),
  u(0x8282dc5e, 0xc35e1fc3),
  u(0x2929e2cb, 0xb0cb52b0),
  u(0x5a5ac399, 0x7799b477),
  u(0x1e1e2d33, 0x11333c11),
  u(0x7b7b3d46, 0xcb46f6cb),
  u(0xa8a8b71f, 0xfc1f4bfc),
  u(0x6d6d0c61, 0xd661dad6),
  u(0x2c2c624e, 0x3a4e583a),
];

const T2 = [
  u(0xa5c6c632, 0xf4a5f497),
  u(0x84f8f86f, 0x978497eb),
  u(0x99eeee5e, 0xb099b0c7),
  u(0x8df6f67a, 0x8c8d8cf7),
  u(0xdffffe8, 0x170d17e5),
  u(0xbdd6d60a, 0xdcbddcb7),
  u(0xb1dede16, 0xc8b1c8a7),
  u(0x5491916d, 0xfc54fc39),
  u(0x50606090, 0xf050f0c0),
  u(0x3020207, 0x5030504),
  u(0xa9cece2e, 0xe0a9e087),
  u(0x7d5656d1, 0x877d87ac),
  u(0x19e7e7cc, 0x2b192bd5),
  u(0x62b5b513, 0xa662a671),
  u(0xe64d4d7c, 0x31e6319a),
  u(0x9aecec59, 0xb59ab5c3),
  u(0x458f8f40, 0xcf45cf05),
  u(0x9d1f1fa3, 0xbc9dbc3e),
  u(0x40898949, 0xc040c009),
  u(0x87fafa68, 0x928792ef),
  u(0x15efefd0, 0x3f153fc5),
  u(0xebb2b294, 0x26eb267f),
  u(0xc98e8ece, 0x40c94007),
  u(0xbfbfbe6, 0x1d0b1ded),
  u(0xec41416e, 0x2fec2f82),
  u(0x67b3b31a, 0xa967a97d),
  u(0xfd5f5f43, 0x1cfd1cbe),
  u(0xea454560, 0x25ea258a),
  u(0xbf2323f9, 0xdabfda46),
  u(0xf7535351, 0x2f702a6),
  u(0x96e4e445, 0xa196a1d3),
  u(0x5b9b9b76, 0xed5bed2d),
  u(0xc2757528, 0x5dc25dea),
  u(0x1ce1e1c5, 0x241c24d9),
  u(0xae3d3dd4, 0xe9aee97a),
  u(0x6a4c4cf2, 0xbe6abe98),
  u(0x5a6c6c82, 0xee5aeed8),
  u(0x417e7ebd, 0xc341c3fc),
  u(0x2f5f5f3, 0x60206f1),
  u(0x4f838352, 0xd14fd11d),
  u(0x5c68688c, 0xe45ce4d0),
  u(0xf4515156, 0x7f407a2),
  u(0x34d1d18d, 0x5c345cb9),
  u(0x8f9f9e1, 0x180818e9),
  u(0x93e2e24c, 0xae93aedf),
  u(0x73abab3e, 0x9573954d),
  u(0x53626297, 0xf553f5c4),
  u(0x3f2a2a6b, 0x413f4154),
  u(0xc08081c, 0x140c1410),
  u(0x52959563, 0xf652f631),
  u(0x654646e9, 0xaf65af8c),
  u(0x5e9d9d7f, 0xe25ee221),
  u(0x28303048, 0x78287860),
  u(0xa13737cf, 0xf8a1f86e),
  u(0xf0a0a1b, 0x110f1114),
  u(0xb52f2feb, 0xc4b5c45e),
  u(0x90e0e15, 0x1b091b1c),
  u(0x3624247e, 0x5a365a48),
  u(0x9b1b1bad, 0xb69bb636),
  u(0x3ddfdf98, 0x473d47a5),
  u(0x26cdcda7, 0x6a266a81),
  u(0x694e4ef5, 0xbb69bb9c),
  u(0xcd7f7f33, 0x4ccd4cfe),
  u(0x9feaea50, 0xba9fbacf),
  u(0x1b12123f, 0x2d1b2d24),
  u(0x9e1d1da4, 0xb99eb93a),
  u(0x745858c4, 0x9c749cb0),
  u(0x2e343446, 0x722e7268),
  u(0x2d363641, 0x772d776c),
  u(0xb2dcdc11, 0xcdb2cda3),
  u(0xeeb4b49d, 0x29ee2973),
  u(0xfb5b5b4d, 0x16fb16b6),
  u(0xf6a4a4a5, 0x1f60153),
  u(0x4d7676a1, 0xd74dd7ec),
  u(0x61b7b714, 0xa361a375),
  u(0xce7d7d34, 0x49ce49fa),
  u(0x7b5252df, 0x8d7b8da4),
  u(0x3edddd9f, 0x423e42a1),
  u(0x715e5ecd, 0x937193bc),
  u(0x971313b1, 0xa297a226),
  u(0xf5a6a6a2, 0x4f50457),
  u(0x68b9b901, 0xb868b869),
  u(0x0, 0x0),
  u(0x2cc1c1b5, 0x742c7499),
  u(0x604040e0, 0xa060a080),
  u(0x1fe3e3c2, 0x211f21dd),
  u(0xc879793a, 0x43c843f2),
  u(0xedb6b69a, 0x2ced2c77),
  u(0xbed4d40d, 0xd9bed9b3),
  u(0x468d8d47, 0xca46ca01),
  u(0xd9676717, 0x70d970ce),
  u(0x4b7272af, 0xdd4bdde4),
  u(0xde9494ed, 0x79de7933),
  u(0xd49898ff, 0x67d4672b),
  u(0xe8b0b093, 0x23e8237b),
  u(0x4a85855b, 0xde4ade11),
  u(0x6bbbbb06, 0xbd6bbd6d),
  u(0x2ac5c5bb, 0x7e2a7e91),
  u(0xe54f4f7b, 0x34e5349e),
  u(0x16ededd7, 0x3a163ac1),
  u(0xc58686d2, 0x54c55417),
  u(0xd79a9af8, 0x62d7622f),
  u(0x55666699, 0xff55ffcc),
  u(0x941111b6, 0xa794a722),
  u(0xcf8a8ac0, 0x4acf4a0f),
  u(0x10e9e9d9, 0x301030c9),
  u(0x604040e, 0xa060a08),
  u(0x81fefe66, 0x988198e7),
  u(0xf0a0a0ab, 0xbf00b5b),
  u(0x447878b4, 0xcc44ccf0),
  u(0xba2525f0, 0xd5bad54a),
  u(0xe34b4b75, 0x3ee33e96),
  u(0xf3a2a2ac, 0xef30e5f),
  u(0xfe5d5d44, 0x19fe19ba),
  u(0xc08080db, 0x5bc05b1b),
  u(0x8a050580, 0x858a850a),
  u(0xad3f3fd3, 0xecadec7e),
  u(0xbc2121fe, 0xdfbcdf42),
  u(0x487070a8, 0xd848d8e0),
  u(0x4f1f1fd, 0xc040cf9),
  u(0xdf636319, 0x7adf7ac6),
  u(0xc177772f, 0x58c158ee),
  u(0x75afaf30, 0x9f759f45),
  u(0x634242e7, 0xa563a584),
  u(0x30202070, 0x50305040),
  u(0x1ae5e5cb, 0x2e1a2ed1),
  u(0xefdfdef, 0x120e12e1),
  u(0x6dbfbf08, 0xb76db765),
  u(0x4c818155, 0xd44cd419),
  u(0x14181824, 0x3c143c30),
  u(0x35262679, 0x5f355f4c),
  u(0x2fc3c3b2, 0x712f719d),
  u(0xe1bebe86, 0x38e13867),
  u(0xa23535c8, 0xfda2fd6a),
  u(0xcc8888c7, 0x4fcc4f0b),
  u(0x392e2e65, 0x4b394b5c),
  u(0x5793936a, 0xf957f93d),
  u(0xf2555558, 0xdf20daa),
  u(0x82fcfc61, 0x9d829de3),
  u(0x477a7ab3, 0xc947c9f4),
  u(0xacc8c827, 0xefacef8b),
  u(0xe7baba88, 0x32e7326f),
  u(0x2b32324f, 0x7d2b7d64),
  u(0x95e6e642, 0xa495a4d7),
  u(0xa0c0c03b, 0xfba0fb9b),
  u(0x981919aa, 0xb398b332),
  u(0xd19e9ef6, 0x68d16827),
  u(0x7fa3a322, 0x817f815d),
  u(0x664444ee, 0xaa66aa88),
  u(0x7e5454d6, 0x827e82a8),
  u(0xab3b3bdd, 0xe6abe676),
  u(0x830b0b95, 0x9e839e16),
  u(0xca8c8cc9, 0x45ca4503),
  u(0x29c7c7bc, 0x7b297b95),
  u(0xd36b6b05, 0x6ed36ed6),
  u(0x3c28286c, 0x443c4450),
  u(0x79a7a72c, 0x8b798b55),
  u(0xe2bcbc81, 0x3de23d63),
  u(0x1d161631, 0x271d272c),
  u(0x76adad37, 0x9a769a41),
  u(0x3bdbdb96, 0x4d3b4dad),
  u(0x5664649e, 0xfa56fac8),
  u(0x4e7474a6, 0xd24ed2e8),
  u(0x1e141436, 0x221e2228),
  u(0xdb9292e4, 0x76db763f),
  u(0xa0c0c12, 0x1e0a1e18),
  u(0x6c4848fc, 0xb46cb490),
  u(0xe4b8b88f, 0x37e4376b),
  u(0x5d9f9f78, 0xe75de725),
  u(0x6ebdbd0f, 0xb26eb261),
  u(0xef434369, 0x2aef2a86),
  u(0xa6c4c435, 0xf1a6f193),
  u(0xa83939da, 0xe3a8e372),
  u(0xa43131c6, 0xf7a4f762),
  u(0x37d3d38a, 0x593759bd),
  u(0x8bf2f274, 0x868b86ff),
  u(0x32d5d583, 0x563256b1),
  u(0x438b8b4e, 0xc543c50d),
  u(0x596e6e85, 0xeb59ebdc),
  u(0xb7dada18, 0xc2b7c2af),
  u(0x8c01018e, 0x8f8c8f02),
  u(0x64b1b11d, 0xac64ac79),
  u(0xd29c9cf1, 0x6dd26d23),
  u(0xe0494972, 0x3be03b92),
  u(0xb4d8d81f, 0xc7b4c7ab),
  u(0xfaacacb9, 0x15fa1543),
  u(0x7f3f3fa, 0x90709fd),
  u(0x25cfcfa0, 0x6f256f85),
  u(0xafcaca20, 0xeaafea8f),
  u(0x8ef4f47d, 0x898e89f3),
  u(0xe9474767, 0x20e9208e),
  u(0x18101038, 0x28182820),
  u(0xd56f6f0b, 0x64d564de),
  u(0x88f0f073, 0x838883fb),
  u(0x6f4a4afb, 0xb16fb194),
  u(0x725c5cca, 0x967296b8),
  u(0x24383854, 0x6c246c70),
  u(0xf157575f, 0x8f108ae),
  u(0xc7737321, 0x52c752e6),
  u(0x51979764, 0xf351f335),
  u(0x23cbcbae, 0x6523658d),
  u(0x7ca1a125, 0x847c8459),
  u(0x9ce8e857, 0xbf9cbfcb),
  u(0x213e3e5d, 0x6321637c),
  u(0xdd9696ea, 0x7cdd7c37),
  u(0xdc61611e, 0x7fdc7fc2),
  u(0x860d0d9c, 0x9186911a),
  u(0x850f0f9b, 0x9485941e),
  u(0x90e0e04b, 0xab90abdb),
  u(0x427c7cba, 0xc642c6f8),
  u(0xc4717126, 0x57c457e2),
  u(0xaacccc29, 0xe5aae583),
  u(0xd89090e3, 0x73d8733b),
  u(0x5060609, 0xf050f0c),
  u(0x1f7f7f4, 0x30103f5),
  u(0x121c1c2a, 0x36123638),
  u(0xa3c2c23c, 0xfea3fe9f),
  u(0x5f6a6a8b, 0xe15fe1d4),
  u(0xf9aeaebe, 0x10f91047),
  u(0xd0696902, 0x6bd06bd2),
  u(0x911717bf, 0xa891a82e),
  u(0x58999971, 0xe858e829),
  u(0x273a3a53, 0x69276974),
  u(0xb92727f7, 0xd0b9d04e),
  u(0x38d9d991, 0x483848a9),
  u(0x13ebebde, 0x351335cd),
  u(0xb32b2be5, 0xceb3ce56),
  u(0x33222277, 0x55335544),
  u(0xbbd2d204, 0xd6bbd6bf),
  u(0x70a9a939, 0x90709049),
  u(0x89070787, 0x8089800e),
  u(0xa73333c1, 0xf2a7f266),
  u(0xb62d2dec, 0xc1b6c15a),
  u(0x223c3c5a, 0x66226678),
  u(0x921515b8, 0xad92ad2a),
  u(0x20c9c9a9, 0x60206089),
  u(0x4987875c, 0xdb49db15),
  u(0xffaaaab0, 0x1aff1a4f),
  u(0x785050d8, 0x887888a0),
  u(0x7aa5a52b, 0x8e7a8e51),
  u(0x8f030389, 0x8a8f8a06),
  u(0xf859594a, 0x13f813b2),
  u(0x80090992, 0x9b809b12),
  u(0x171a1a23, 0x39173934),
  u(0xda656510, 0x75da75ca),
  u(0x31d7d784, 0x533153b5),
  u(0xc68484d5, 0x51c65113),
  u(0xb8d0d003, 0xd3b8d3bb),
  u(0xc38282dc, 0x5ec35e1f),
  u(0xb02929e2, 0xcbb0cb52),
  u(0x775a5ac3, 0x997799b4),
  u(0x111e1e2d, 0x3311333c),
  u(0xcb7b7b3d, 0x46cb46f6),
  u(0xfca8a8b7, 0x1ffc1f4b),
  u(0xd66d6d0c, 0x61d661da),
  u(0x3a2c2c62, 0x4e3a4e58),
];

const T3 = [
  u(0x97a5c6c6, 0x32f4a5f4),
  u(0xeb84f8f8, 0x6f978497),
  u(0xc799eeee, 0x5eb099b0),
  u(0xf78df6f6, 0x7a8c8d8c),
  u(0xe50dffff, 0xe8170d17),
  u(0xb7bdd6d6, 0xadcbddc),
  u(0xa7b1dede, 0x16c8b1c8),
  u(0x39549191, 0x6dfc54fc),
  u(0xc0506060, 0x90f050f0),
  u(0x4030202, 0x7050305),
  u(0x87a9cece, 0x2ee0a9e0),
  u(0xac7d5656, 0xd1877d87),
  u(0xd519e7e7, 0xcc2b192b),
  u(0x7162b5b5, 0x13a662a6),
  u(0x9ae64d4d, 0x7c31e631),
  u(0xc39aecec, 0x59b59ab5),
  u(0x5458f8f, 0x40cf45cf),
  u(0x3e9d1f1f, 0xa3bc9dbc),
  u(0x9408989, 0x49c040c0),
  u(0xef87fafa, 0x68928792),
  u(0xc515efef, 0xd03f153f),
  u(0x7febb2b2, 0x9426eb26),
  u(0x7c98e8e, 0xce40c940),
  u(0xed0bfbfb, 0xe61d0b1d),
  u(0x82ec4141, 0x6e2fec2f),
  u(0x7d67b3b3, 0x1aa967a9),
  u(0xbefd5f5f, 0x431cfd1c),
  u(0x8aea4545, 0x6025ea25),
  u(0x46bf2323, 0xf9dabfda),
  u(0xa6f75353, 0x5102f702),
  u(0xd396e4e4, 0x45a196a1),
  u(0x2d5b9b9b, 0x76ed5bed),
  u(0xeac27575, 0x285dc25d),
  u(0xd91ce1e1, 0xc5241c24),
  u(0x7aae3d3d, 0xd4e9aee9),
  u(0x986a4c4c, 0xf2be6abe),
  u(0xd85a6c6c, 0x82ee5aee),
  u(0xfc417e7e, 0xbdc341c3),
  u(0xf102f5f5, 0xf3060206),
  u(0x1d4f8383, 0x52d14fd1),
  u(0xd05c6868, 0x8ce45ce4),
  u(0xa2f45151, 0x5607f407),
  u(0xb934d1d1, 0x8d5c345c),
  u(0xe908f9f9, 0xe1180818),
  u(0xdf93e2e2, 0x4cae93ae),
  u(0x4d73abab, 0x3e957395),
  u(0xc4536262, 0x97f553f5),
  u(0x543f2a2a, 0x6b413f41),
  u(0x100c0808, 0x1c140c14),
  u(0x31529595, 0x63f652f6),
  u(0x8c654646, 0xe9af65af),
  u(0x215e9d9d, 0x7fe25ee2),
  u(0x60283030, 0x48782878),
  u(0x6ea13737, 0xcff8a1f8),
  u(0x140f0a0a, 0x1b110f11),
  u(0x5eb52f2f, 0xebc4b5c4),
  u(0x1c090e0e, 0x151b091b),
  u(0x48362424, 0x7e5a365a),
  u(0x369b1b1b, 0xadb69bb6),
  u(0xa53ddfdf, 0x98473d47),
  u(0x8126cdcd, 0xa76a266a),
  u(0x9c694e4e, 0xf5bb69bb),
  u(0xfecd7f7f, 0x334ccd4c),
  u(0xcf9feaea, 0x50ba9fba),
  u(0x241b1212, 0x3f2d1b2d),
  u(0x3a9e1d1d, 0xa4b99eb9),
  u(0xb0745858, 0xc49c749c),
  u(0x682e3434, 0x46722e72),
  u(0x6c2d3636, 0x41772d77),
  u(0xa3b2dcdc, 0x11cdb2cd),
  u(0x73eeb4b4, 0x9d29ee29),
  u(0xb6fb5b5b, 0x4d16fb16),
  u(0x53f6a4a4, 0xa501f601),
  u(0xec4d7676, 0xa1d74dd7),
  u(0x7561b7b7, 0x14a361a3),
  u(0xface7d7d, 0x3449ce49),
  u(0xa47b5252, 0xdf8d7b8d),
  u(0xa13edddd, 0x9f423e42),
  u(0xbc715e5e, 0xcd937193),
  u(0x26971313, 0xb1a297a2),
  u(0x57f5a6a6, 0xa204f504),
  u(0x6968b9b9, 0x1b868b8),
  u(0x0, 0x0),
  u(0x992cc1c1, 0xb5742c74),
  u(0x80604040, 0xe0a060a0),
  u(0xdd1fe3e3, 0xc2211f21),
  u(0xf2c87979, 0x3a43c843),
  u(0x77edb6b6, 0x9a2ced2c),
  u(0xb3bed4d4, 0xdd9bed9),
  u(0x1468d8d, 0x47ca46ca),
  u(0xced96767, 0x1770d970),
  u(0xe44b7272, 0xafdd4bdd),
  u(0x33de9494, 0xed79de79),
  u(0x2bd49898, 0xff67d467),
  u(0x7be8b0b0, 0x9323e823),
  u(0x114a8585, 0x5bde4ade),
  u(0x6d6bbbbb, 0x6bd6bbd),
  u(0x912ac5c5, 0xbb7e2a7e),
  u(0x9ee54f4f, 0x7b34e534),
  u(0xc116eded, 0xd73a163a),
  u(0x17c58686, 0xd254c554),
  u(0x2fd79a9a, 0xf862d762),
  u(0xcc556666, 0x99ff55ff),
  u(0x22941111, 0xb6a794a7),
  u(0xfcf8a8a, 0xc04acf4a),
  u(0xc910e9e9, 0xd9301030),
  u(0x8060404, 0xe0a060a),
  u(0xe781fefe, 0x66988198),
  u(0x5bf0a0a0, 0xab0bf00b),
  u(0xf0447878, 0xb4cc44cc),
  u(0x4aba2525, 0xf0d5bad5),
  u(0x96e34b4b, 0x753ee33e),
  u(0x5ff3a2a2, 0xac0ef30e),
  u(0xbafe5d5d, 0x4419fe19),
  u(0x1bc08080, 0xdb5bc05b),
  u(0xa8a0505, 0x80858a85),
  u(0x7ead3f3f, 0xd3ecadec),
  u(0x42bc2121, 0xfedfbcdf),
  u(0xe0487070, 0xa8d848d8),
  u(0xf904f1f1, 0xfd0c040c),
  u(0xc6df6363, 0x197adf7a),
  u(0xeec17777, 0x2f58c158),
  u(0x4575afaf, 0x309f759f),
  u(0x84634242, 0xe7a563a5),
  u(0x40302020, 0x70503050),
  u(0xd11ae5e5, 0xcb2e1a2e),
  u(0xe10efdfd, 0xef120e12),
  u(0x656dbfbf, 0x8b76db7),
  u(0x194c8181, 0x55d44cd4),
  u(0x30141818, 0x243c143c),
  u(0x4c352626, 0x795f355f),
  u(0x9d2fc3c3, 0xb2712f71),
  u(0x67e1bebe, 0x8638e138),
  u(0x6aa23535, 0xc8fda2fd),
  u(0xbcc8888, 0xc74fcc4f),
  u(0x5c392e2e, 0x654b394b),
  u(0x3d579393, 0x6af957f9),
  u(0xaaf25555, 0x580df20d),
  u(0xe382fcfc, 0x619d829d),
  u(0xf4477a7a, 0xb3c947c9),
  u(0x8bacc8c8, 0x27efacef),
  u(0x6fe7baba, 0x8832e732),
  u(0x642b3232, 0x4f7d2b7d),
  u(0xd795e6e6, 0x42a495a4),
  u(0x9ba0c0c0, 0x3bfba0fb),
  u(0x32981919, 0xaab398b3),
  u(0x27d19e9e, 0xf668d168),
  u(0x5d7fa3a3, 0x22817f81),
  u(0x88664444, 0xeeaa66aa),
  u(0xa87e5454, 0xd6827e82),
  u(0x76ab3b3b, 0xdde6abe6),
  u(0x16830b0b, 0x959e839e),
  u(0x3ca8c8c, 0xc945ca45),
  u(0x9529c7c7, 0xbc7b297b),
  u(0xd6d36b6b, 0x56ed36e),
  u(0x503c2828, 0x6c443c44),
  u(0x5579a7a7, 0x2c8b798b),
  u(0x63e2bcbc, 0x813de23d),
  u(0x2c1d1616, 0x31271d27),
  u(0x4176adad, 0x379a769a),
  u(0xad3bdbdb, 0x964d3b4d),
  u(0xc8566464, 0x9efa56fa),
  u(0xe84e7474, 0xa6d24ed2),
  u(0x281e1414, 0x36221e22),
  u(0x3fdb9292, 0xe476db76),
  u(0x180a0c0c, 0x121e0a1e),
  u(0x906c4848, 0xfcb46cb4),
  u(0x6be4b8b8, 0x8f37e437),
  u(0x255d9f9f, 0x78e75de7),
  u(0x616ebdbd, 0xfb26eb2),
  u(0x86ef4343, 0x692aef2a),
  u(0x93a6c4c4, 0x35f1a6f1),
  u(0x72a83939, 0xdae3a8e3),
  u(0x62a43131, 0xc6f7a4f7),
  u(0xbd37d3d3, 0x8a593759),
  u(0xff8bf2f2, 0x74868b86),
  u(0xb132d5d5, 0x83563256),
  u(0xd438b8b, 0x4ec543c5),
  u(0xdc596e6e, 0x85eb59eb),
  u(0xafb7dada, 0x18c2b7c2),
  u(0x28c0101, 0x8e8f8c8f),
  u(0x7964b1b1, 0x1dac64ac),
  u(0x23d29c9c, 0xf16dd26d),
  u(0x92e04949, 0x723be03b),
  u(0xabb4d8d8, 0x1fc7b4c7),
  u(0x43faacac, 0xb915fa15),
  u(0xfd07f3f3, 0xfa090709),
  u(0x8525cfcf, 0xa06f256f),
  u(0x8fafcaca, 0x20eaafea),
  u(0xf38ef4f4, 0x7d898e89),
  u(0x8ee94747, 0x6720e920),
  u(0x20181010, 0x38281828),
  u(0xded56f6f, 0xb64d564),
  u(0xfb88f0f0, 0x73838883),
  u(0x946f4a4a, 0xfbb16fb1),
  u(0xb8725c5c, 0xca967296),
  u(0x70243838, 0x546c246c),
  u(0xaef15757, 0x5f08f108),
  u(0xe6c77373, 0x2152c752),
  u(0x35519797, 0x64f351f3),
  u(0x8d23cbcb, 0xae652365),
  u(0x597ca1a1, 0x25847c84),
  u(0xcb9ce8e8, 0x57bf9cbf),
  u(0x7c213e3e, 0x5d632163),
  u(0x37dd9696, 0xea7cdd7c),
  u(0xc2dc6161, 0x1e7fdc7f),
  u(0x1a860d0d, 0x9c918691),
  u(0x1e850f0f, 0x9b948594),
  u(0xdb90e0e0, 0x4bab90ab),
  u(0xf8427c7c, 0xbac642c6),
  u(0xe2c47171, 0x2657c457),
  u(0x83aacccc, 0x29e5aae5),
  u(0x3bd89090, 0xe373d873),
  u(0xc050606, 0x90f050f),
  u(0xf501f7f7, 0xf4030103),
  u(0x38121c1c, 0x2a361236),
  u(0x9fa3c2c2, 0x3cfea3fe),
  u(0xd45f6a6a, 0x8be15fe1),
  u(0x47f9aeae, 0xbe10f910),
  u(0xd2d06969, 0x26bd06b),
  u(0x2e911717, 0xbfa891a8),
  u(0x29589999, 0x71e858e8),
  u(0x74273a3a, 0x53692769),
  u(0x4eb92727, 0xf7d0b9d0),
  u(0xa938d9d9, 0x91483848),
  u(0xcd13ebeb, 0xde351335),
  u(0x56b32b2b, 0xe5ceb3ce),
  u(0x44332222, 0x77553355),
  u(0xbfbbd2d2, 0x4d6bbd6),
  u(0x4970a9a9, 0x39907090),
  u(0xe890707, 0x87808980),
  u(0x66a73333, 0xc1f2a7f2),
  u(0x5ab62d2d, 0xecc1b6c1),
  u(0x78223c3c, 0x5a662266),
  u(0x2a921515, 0xb8ad92ad),
  u(0x8920c9c9, 0xa9602060),
  u(0x15498787, 0x5cdb49db),
  u(0x4fffaaaa, 0xb01aff1a),
  u(0xa0785050, 0xd8887888),
  u(0x517aa5a5, 0x2b8e7a8e),
  u(0x68f0303, 0x898a8f8a),
  u(0xb2f85959, 0x4a13f813),
  u(0x12800909, 0x929b809b),
  u(0x34171a1a, 0x23391739),
  u(0xcada6565, 0x1075da75),
  u(0xb531d7d7, 0x84533153),
  u(0x13c68484, 0xd551c651),
  u(0xbbb8d0d0, 0x3d3b8d3),
  u(0x1fc38282, 0xdc5ec35e),
  u(0x52b02929, 0xe2cbb0cb),
  u(0xb4775a5a, 0xc3997799),
  u(0x3c111e1e, 0x2d331133),
  u(0xf6cb7b7b, 0x3d46cb46),
  u(0x4bfca8a8, 0xb71ffc1f),
  u(0xdad66d6d, 0xc61d661),
  u(0x583a2c2c, 0x624e3a4e),
];

const T4 = [
  u(0xf497a5c6, 0xc632f4a5),
  u(0x97eb84f8, 0xf86f9784),
  u(0xb0c799ee, 0xee5eb099),
  u(0x8cf78df6, 0xf67a8c8d),
  u(0x17e50dff, 0xffe8170d),
  u(0xdcb7bdd6, 0xd60adcbd),
  u(0xc8a7b1de, 0xde16c8b1),
  u(0xfc395491, 0x916dfc54),
  u(0xf0c05060, 0x6090f050),
  u(0x05040302, 0x02070503),
  u(0xe087a9ce, 0xce2ee0a9),
  u(0x87ac7d56, 0x56d1877d),
  u(0x2bd519e7, 0xe7cc2b19),
  u(0xa67162b5, 0xb513a662),
  u(0x319ae64d, 0x4d7c31e6),
  u(0xb5c39aec, 0xec59b59a),
  u(0xcf05458f, 0x8f40cf45),
  u(0xbc3e9d1f, 0x1fa3bc9d),
  u(0xc0094089, 0x8949c040),
  u(0x92ef87fa, 0xfa689287),
  u(0x3fc515ef, 0xefd03f15),
  u(0x267febb2, 0xb29426eb),
  u(0x4007c98e, 0x8ece40c9),
  u(0x1ded0bfb, 0xfbe61d0b),
  u(0x2f82ec41, 0x416e2fec),
  u(0xa97d67b3, 0xb31aa967),
  u(0x1cbefd5f, 0x5f431cfd),
  u(0x258aea45, 0x456025ea),
  u(0xda46bf23, 0x23f9dabf),
  u(0x02a6f753, 0x535102f7),
  u(0xa1d396e4, 0xe445a196),
  u(0xed2d5b9b, 0x9b76ed5b),
  u(0x5deac275, 0x75285dc2),
  u(0x24d91ce1, 0xe1c5241c),
  u(0xe97aae3d, 0x3dd4e9ae),
  u(0xbe986a4c, 0x4cf2be6a),
  u(0xeed85a6c, 0x6c82ee5a),
  u(0xc3fc417e, 0x7ebdc341),
  u(0x06f102f5, 0xf5f30602),
  u(0xd11d4f83, 0x8352d14f),
  u(0xe4d05c68, 0x688ce45c),
  u(0x07a2f451, 0x515607f4),
  u(0x5cb934d1, 0xd18d5c34),
  u(0x18e908f9, 0xf9e11808),
  u(0xaedf93e2, 0xe24cae93),
  u(0x954d73ab, 0xab3e9573),
  u(0xf5c45362, 0x6297f553),
  u(0x41543f2a, 0x2a6b413f),
  u(0x14100c08, 0x081c140c),
  u(0xf6315295, 0x9563f652),
  u(0xaf8c6546, 0x46e9af65),
  u(0xe2215e9d, 0x9d7fe25e),
  u(0x78602830, 0x30487828),
  u(0xf86ea137, 0x37cff8a1),
  u(0x11140f0a, 0x0a1b110f),
  u(0xc45eb52f, 0x2febc4b5),
  u(0x1b1c090e, 0x0e151b09),
  u(0x5a483624, 0x247e5a36),
  u(0xb6369b1b, 0x1badb69b),
  u(0x47a53ddf, 0xdf98473d),
  u(0x6a8126cd, 0xcda76a26),
  u(0xbb9c694e, 0x4ef5bb69),
  u(0x4cfecd7f, 0x7f334ccd),
  u(0xbacf9fea, 0xea50ba9f),
  u(0x2d241b12, 0x123f2d1b),
  u(0xb93a9e1d, 0x1da4b99e),
  u(0x9cb07458, 0x58c49c74),
  u(0x72682e34, 0x3446722e),
  u(0x776c2d36, 0x3641772d),
  u(0xcda3b2dc, 0xdc11cdb2),
  u(0x2973eeb4, 0xb49d29ee),
  u(0x16b6fb5b, 0x5b4d16fb),
  u(0x0153f6a4, 0xa4a501f6),
  u(0xd7ec4d76, 0x76a1d74d),
  u(0xa37561b7, 0xb714a361),
  u(0x49face7d, 0x7d3449ce),
  u(0x8da47b52, 0x52df8d7b),
  u(0x42a13edd, 0xdd9f423e),
  u(0x93bc715e, 0x5ecd9371),
  u(0xa2269713, 0x13b1a297),
  u(0x0457f5a6, 0xa6a204f5),
  u(0xb86968b9, 0xb901b868),
  u(0x00000000, 0x00000000),
  u(0x74992cc1, 0xc1b5742c),
  u(0xa0806040, 0x40e0a060),
  u(0x21dd1fe3, 0xe3c2211f),
  u(0x43f2c879, 0x793a43c8),
  u(0x2c77edb6, 0xb69a2ced),
  u(0xd9b3bed4, 0xd40dd9be),
  u(0xca01468d, 0x8d47ca46),
  u(0x70ced967, 0x671770d9),
  u(0xdde44b72, 0x72afdd4b),
  u(0x7933de94, 0x94ed79de),
  u(0x672bd498, 0x98ff67d4),
  u(0x237be8b0, 0xb09323e8),
  u(0xde114a85, 0x855bde4a),
  u(0xbd6d6bbb, 0xbb06bd6b),
  u(0x7e912ac5, 0xc5bb7e2a),
  u(0x349ee54f, 0x4f7b34e5),
  u(0x3ac116ed, 0xedd73a16),
  u(0x5417c586, 0x86d254c5),
  u(0x622fd79a, 0x9af862d7),
  u(0xffcc5566, 0x6699ff55),
  u(0xa7229411, 0x11b6a794),
  u(0x4a0fcf8a, 0x8ac04acf),
  u(0x30c910e9, 0xe9d93010),
  u(0x0a080604, 0x040e0a06),
  u(0x98e781fe, 0xfe669881),
  u(0x0b5bf0a0, 0xa0ab0bf0),
  u(0xccf04478, 0x78b4cc44),
  u(0xd54aba25, 0x25f0d5ba),
  u(0x3e96e34b, 0x4b753ee3),
  u(0x0e5ff3a2, 0xa2ac0ef3),
  u(0x19bafe5d, 0x5d4419fe),
  u(0x5b1bc080, 0x80db5bc0),
  u(0x850a8a05, 0x0580858a),
  u(0xec7ead3f, 0x3fd3ecad),
  u(0xdf42bc21, 0x21fedfbc),
  u(0xd8e04870, 0x70a8d848),
  u(0x0cf904f1, 0xf1fd0c04),
  u(0x7ac6df63, 0x63197adf),
  u(0x58eec177, 0x772f58c1),
  u(0x9f4575af, 0xaf309f75),
  u(0xa5846342, 0x42e7a563),
  u(0x50403020, 0x20705030),
  u(0x2ed11ae5, 0xe5cb2e1a),
  u(0x12e10efd, 0xfdef120e),
  u(0xb7656dbf, 0xbf08b76d),
  u(0xd4194c81, 0x8155d44c),
  u(0x3c301418, 0x18243c14),
  u(0x5f4c3526, 0x26795f35),
  u(0x719d2fc3, 0xc3b2712f),
  u(0x3867e1be, 0xbe8638e1),
  u(0xfd6aa235, 0x35c8fda2),
  u(0x4f0bcc88, 0x88c74fcc),
  u(0x4b5c392e, 0x2e654b39),
  u(0xf93d5793, 0x936af957),
  u(0x0daaf255, 0x55580df2),
  u(0x9de382fc, 0xfc619d82),
  u(0xc9f4477a, 0x7ab3c947),
  u(0xef8bacc8, 0xc827efac),
  u(0x326fe7ba, 0xba8832e7),
  u(0x7d642b32, 0x324f7d2b),
  u(0xa4d795e6, 0xe642a495),
  u(0xfb9ba0c0, 0xc03bfba0),
  u(0xb3329819, 0x19aab398),
  u(0x6827d19e, 0x9ef668d1),
  u(0x815d7fa3, 0xa322817f),
  u(0xaa886644, 0x44eeaa66),
  u(0x82a87e54, 0x54d6827e),
  u(0xe676ab3b, 0x3bdde6ab),
  u(0x9e16830b, 0x0b959e83),
  u(0x4503ca8c, 0x8cc945ca),
  u(0x7b9529c7, 0xc7bc7b29),
  u(0x6ed6d36b, 0x6b056ed3),
  u(0x44503c28, 0x286c443c),
  u(0x8b5579a7, 0xa72c8b79),
  u(0x3d63e2bc, 0xbc813de2),
  u(0x272c1d16, 0x1631271d),
  u(0x9a4176ad, 0xad379a76),
  u(0x4dad3bdb, 0xdb964d3b),
  u(0xfac85664, 0x649efa56),
  u(0xd2e84e74, 0x74a6d24e),
  u(0x22281e14, 0x1436221e),
  u(0x763fdb92, 0x92e476db),
  u(0x1e180a0c, 0x0c121e0a),
  u(0xb4906c48, 0x48fcb46c),
  u(0x376be4b8, 0xb88f37e4),
  u(0xe7255d9f, 0x9f78e75d),
  u(0xb2616ebd, 0xbd0fb26e),
  u(0x2a86ef43, 0x43692aef),
  u(0xf193a6c4, 0xc435f1a6),
  u(0xe372a839, 0x39dae3a8),
  u(0xf762a431, 0x31c6f7a4),
  u(0x59bd37d3, 0xd38a5937),
  u(0x86ff8bf2, 0xf274868b),
  u(0x56b132d5, 0xd5835632),
  u(0xc50d438b, 0x8b4ec543),
  u(0xebdc596e, 0x6e85eb59),
  u(0xc2afb7da, 0xda18c2b7),
  u(0x8f028c01, 0x018e8f8c),
  u(0xac7964b1, 0xb11dac64),
  u(0x6d23d29c, 0x9cf16dd2),
  u(0x3b92e049, 0x49723be0),
  u(0xc7abb4d8, 0xd81fc7b4),
  u(0x1543faac, 0xacb915fa),
  u(0x09fd07f3, 0xf3fa0907),
  u(0x6f8525cf, 0xcfa06f25),
  u(0xea8fafca, 0xca20eaaf),
  u(0x89f38ef4, 0xf47d898e),
  u(0x208ee947, 0x476720e9),
  u(0x28201810, 0x10382818),
  u(0x64ded56f, 0x6f0b64d5),
  u(0x83fb88f0, 0xf0738388),
  u(0xb1946f4a, 0x4afbb16f),
  u(0x96b8725c, 0x5cca9672),
  u(0x6c702438, 0x38546c24),
  u(0x08aef157, 0x575f08f1),
  u(0x52e6c773, 0x732152c7),
  u(0xf3355197, 0x9764f351),
  u(0x658d23cb, 0xcbae6523),
  u(0x84597ca1, 0xa125847c),
  u(0xbfcb9ce8, 0xe857bf9c),
  u(0x637c213e, 0x3e5d6321),
  u(0x7c37dd96, 0x96ea7cdd),
  u(0x7fc2dc61, 0x611e7fdc),
  u(0x911a860d, 0x0d9c9186),
  u(0x941e850f, 0x0f9b9485),
  u(0xabdb90e0, 0xe04bab90),
  u(0xc6f8427c, 0x7cbac642),
  u(0x57e2c471, 0x712657c4),
  u(0xe583aacc, 0xcc29e5aa),
  u(0x733bd890, 0x90e373d8),
  u(0x0f0c0506, 0x06090f05),
  u(0x03f501f7, 0xf7f40301),
  u(0x3638121c, 0x1c2a3612),
  u(0xfe9fa3c2, 0xc23cfea3),
  u(0xe1d45f6a, 0x6a8be15f),
  u(0x1047f9ae, 0xaebe10f9),
  u(0x6bd2d069, 0x69026bd0),
  u(0xa82e9117, 0x17bfa891),
  u(0xe8295899, 0x9971e858),
  u(0x6974273a, 0x3a536927),
  u(0xd04eb927, 0x27f7d0b9),
  u(0x48a938d9, 0xd9914838),
  u(0x35cd13eb, 0xebde3513),
  u(0xce56b32b, 0x2be5ceb3),
  u(0x55443322, 0x22775533),
  u(0xd6bfbbd2, 0xd204d6bb),
  u(0x904970a9, 0xa9399070),
  u(0x800e8907, 0x07878089),
  u(0xf266a733, 0x33c1f2a7),
  u(0xc15ab62d, 0x2decc1b6),
  u(0x6678223c, 0x3c5a6622),
  u(0xad2a9215, 0x15b8ad92),
  u(0x608920c9, 0xc9a96020),
  u(0xdb154987, 0x875cdb49),
  u(0x1a4fffaa, 0xaab01aff),
  u(0x88a07850, 0x50d88878),
  u(0x8e517aa5, 0xa52b8e7a),
  u(0x8a068f03, 0x03898a8f),
  u(0x13b2f859, 0x594a13f8),
  u(0x9b128009, 0x09929b80),
  u(0x3934171a, 0x1a233917),
  u(0x75cada65, 0x651075da),
  u(0x53b531d7, 0xd7845331),
  u(0x5113c684, 0x84d551c6),
  u(0xd3bbb8d0, 0xd003d3b8),
  u(0x5e1fc382, 0x82dc5ec3),
  u(0xcb52b029, 0x29e2cbb0),
  u(0x99b4775a, 0x5ac39977),
  u(0x333c111e, 0x1e2d3311),
  u(0x46f6cb7b, 0x7b3d46cb),
  u(0x1f4bfca8, 0xa8b71ffc),
  u(0x61dad66d, 0x6d0c61d6),
  u(0x4e583a2c, 0x2c624e3a),
];

const T5 = [
  u(0xa5f497a5, 0xc6c632f4),
  u(0x8497eb84, 0xf8f86f97),
  u(0x99b0c799, 0xeeee5eb0),
  u(0x8d8cf78d, 0xf6f67a8c),
  u(0xd17e50d, 0xffffe817),
  u(0xbddcb7bd, 0xd6d60adc),
  u(0xb1c8a7b1, 0xdede16c8),
  u(0x54fc3954, 0x91916dfc),
  u(0x50f0c050, 0x606090f0),
  u(0x3050403, 0x2020705),
  u(0xa9e087a9, 0xcece2ee0),
  u(0x7d87ac7d, 0x5656d187),
  u(0x192bd519, 0xe7e7cc2b),
  u(0x62a67162, 0xb5b513a6),
  u(0xe6319ae6, 0x4d4d7c31),
  u(0x9ab5c39a, 0xecec59b5),
  u(0x45cf0545, 0x8f8f40cf),
  u(0x9dbc3e9d, 0x1f1fa3bc),
  u(0x40c00940, 0x898949c0),
  u(0x8792ef87, 0xfafa6892),
  u(0x153fc515, 0xefefd03f),
  u(0xeb267feb, 0xb2b29426),
  u(0xc94007c9, 0x8e8ece40),
  u(0xb1ded0b, 0xfbfbe61d),
  u(0xec2f82ec, 0x41416e2f),
  u(0x67a97d67, 0xb3b31aa9),
  u(0xfd1cbefd, 0x5f5f431c),
  u(0xea258aea, 0x45456025),
  u(0xbfda46bf, 0x2323f9da),
  u(0xf702a6f7, 0x53535102),
  u(0x96a1d396, 0xe4e445a1),
  u(0x5bed2d5b, 0x9b9b76ed),
  u(0xc25deac2, 0x7575285d),
  u(0x1c24d91c, 0xe1e1c524),
  u(0xaee97aae, 0x3d3dd4e9),
  u(0x6abe986a, 0x4c4cf2be),
  u(0x5aeed85a, 0x6c6c82ee),
  u(0x41c3fc41, 0x7e7ebdc3),
  u(0x206f102, 0xf5f5f306),
  u(0x4fd11d4f, 0x838352d1),
  u(0x5ce4d05c, 0x68688ce4),
  u(0xf407a2f4, 0x51515607),
  u(0x345cb934, 0xd1d18d5c),
  u(0x818e908, 0xf9f9e118),
  u(0x93aedf93, 0xe2e24cae),
  u(0x73954d73, 0xabab3e95),
  u(0x53f5c453, 0x626297f5),
  u(0x3f41543f, 0x2a2a6b41),
  u(0xc14100c, 0x8081c14),
  u(0x52f63152, 0x959563f6),
  u(0x65af8c65, 0x4646e9af),
  u(0x5ee2215e, 0x9d9d7fe2),
  u(0x28786028, 0x30304878),
  u(0xa1f86ea1, 0x3737cff8),
  u(0xf11140f, 0xa0a1b11),
  u(0xb5c45eb5, 0x2f2febc4),
  u(0x91b1c09, 0xe0e151b),
  u(0x365a4836, 0x24247e5a),
  u(0x9bb6369b, 0x1b1badb6),
  u(0x3d47a53d, 0xdfdf9847),
  u(0x266a8126, 0xcdcda76a),
  u(0x69bb9c69, 0x4e4ef5bb),
  u(0xcd4cfecd, 0x7f7f334c),
  u(0x9fbacf9f, 0xeaea50ba),
  u(0x1b2d241b, 0x12123f2d),
  u(0x9eb93a9e, 0x1d1da4b9),
  u(0x749cb074, 0x5858c49c),
  u(0x2e72682e, 0x34344672),
  u(0x2d776c2d, 0x36364177),
  u(0xb2cda3b2, 0xdcdc11cd),
  u(0xee2973ee, 0xb4b49d29),
  u(0xfb16b6fb, 0x5b5b4d16),
  u(0xf60153f6, 0xa4a4a501),
  u(0x4dd7ec4d, 0x7676a1d7),
  u(0x61a37561, 0xb7b714a3),
  u(0xce49face, 0x7d7d3449),
  u(0x7b8da47b, 0x5252df8d),
  u(0x3e42a13e, 0xdddd9f42),
  u(0x7193bc71, 0x5e5ecd93),
  u(0x97a22697, 0x1313b1a2),
  u(0xf50457f5, 0xa6a6a204),
  u(0x68b86968, 0xb9b901b8),
  u(0x0, 0x0),
  u(0x2c74992c, 0xc1c1b574),
  u(0x60a08060, 0x4040e0a0),
  u(0x1f21dd1f, 0xe3e3c221),
  u(0xc843f2c8, 0x79793a43),
  u(0xed2c77ed, 0xb6b69a2c),
  u(0xbed9b3be, 0xd4d40dd9),
  u(0x46ca0146, 0x8d8d47ca),
  u(0xd970ced9, 0x67671770),
  u(0x4bdde44b, 0x7272afdd),
  u(0xde7933de, 0x9494ed79),
  u(0xd4672bd4, 0x9898ff67),
  u(0xe8237be8, 0xb0b09323),
  u(0x4ade114a, 0x85855bde),
  u(0x6bbd6d6b, 0xbbbb06bd),
  u(0x2a7e912a, 0xc5c5bb7e),
  u(0xe5349ee5, 0x4f4f7b34),
  u(0x163ac116, 0xededd73a),
  u(0xc55417c5, 0x8686d254),
  u(0xd7622fd7, 0x9a9af862),
  u(0x55ffcc55, 0x666699ff),
  u(0x94a72294, 0x1111b6a7),
  u(0xcf4a0fcf, 0x8a8ac04a),
  u(0x1030c910, 0xe9e9d930),
  u(0x60a0806, 0x4040e0a),
  u(0x8198e781, 0xfefe6698),
  u(0xf00b5bf0, 0xa0a0ab0b),
  u(0x44ccf044, 0x7878b4cc),
  u(0xbad54aba, 0x2525f0d5),
  u(0xe33e96e3, 0x4b4b753e),
  u(0xf30e5ff3, 0xa2a2ac0e),
  u(0xfe19bafe, 0x5d5d4419),
  u(0xc05b1bc0, 0x8080db5b),
  u(0x8a850a8a, 0x5058085),
  u(0xadec7ead, 0x3f3fd3ec),
  u(0xbcdf42bc, 0x2121fedf),
  u(0x48d8e048, 0x7070a8d8),
  u(0x40cf904, 0xf1f1fd0c),
  u(0xdf7ac6df, 0x6363197a),
  u(0xc158eec1, 0x77772f58),
  u(0x759f4575, 0xafaf309f),
  u(0x63a58463, 0x4242e7a5),
  u(0x30504030, 0x20207050),
  u(0x1a2ed11a, 0xe5e5cb2e),
  u(0xe12e10e, 0xfdfdef12),
  u(0x6db7656d, 0xbfbf08b7),
  u(0x4cd4194c, 0x818155d4),
  u(0x143c3014, 0x1818243c),
  u(0x355f4c35, 0x2626795f),
  u(0x2f719d2f, 0xc3c3b271),
  u(0xe13867e1, 0xbebe8638),
  u(0xa2fd6aa2, 0x3535c8fd),
  u(0xcc4f0bcc, 0x8888c74f),
  u(0x394b5c39, 0x2e2e654b),
  u(0x57f93d57, 0x93936af9),
  u(0xf20daaf2, 0x5555580d),
  u(0x829de382, 0xfcfc619d),
  u(0x47c9f447, 0x7a7ab3c9),
  u(0xacef8bac, 0xc8c827ef),
  u(0xe7326fe7, 0xbaba8832),
  u(0x2b7d642b, 0x32324f7d),
  u(0x95a4d795, 0xe6e642a4),
  u(0xa0fb9ba0, 0xc0c03bfb),
  u(0x98b33298, 0x1919aab3),
  u(0xd16827d1, 0x9e9ef668),
  u(0x7f815d7f, 0xa3a32281),
  u(0x66aa8866, 0x4444eeaa),
  u(0x7e82a87e, 0x5454d682),
  u(0xabe676ab, 0x3b3bdde6),
  u(0x839e1683, 0xb0b959e),
  u(0xca4503ca, 0x8c8cc945),
  u(0x297b9529, 0xc7c7bc7b),
  u(0xd36ed6d3, 0x6b6b056e),
  u(0x3c44503c, 0x28286c44),
  u(0x798b5579, 0xa7a72c8b),
  u(0xe23d63e2, 0xbcbc813d),
  u(0x1d272c1d, 0x16163127),
  u(0x769a4176, 0xadad379a),
  u(0x3b4dad3b, 0xdbdb964d),
  u(0x56fac856, 0x64649efa),
  u(0x4ed2e84e, 0x7474a6d2),
  u(0x1e22281e, 0x14143622),
  u(0xdb763fdb, 0x9292e476),
  u(0xa1e180a, 0xc0c121e),
  u(0x6cb4906c, 0x4848fcb4),
  u(0xe4376be4, 0xb8b88f37),
  u(0x5de7255d, 0x9f9f78e7),
  u(0x6eb2616e, 0xbdbd0fb2),
  u(0xef2a86ef, 0x4343692a),
  u(0xa6f193a6, 0xc4c435f1),
  u(0xa8e372a8, 0x3939dae3),
  u(0xa4f762a4, 0x3131c6f7),
  u(0x3759bd37, 0xd3d38a59),
  u(0x8b86ff8b, 0xf2f27486),
  u(0x3256b132, 0xd5d58356),
  u(0x43c50d43, 0x8b8b4ec5),
  u(0x59ebdc59, 0x6e6e85eb),
  u(0xb7c2afb7, 0xdada18c2),
  u(0x8c8f028c, 0x1018e8f),
  u(0x64ac7964, 0xb1b11dac),
  u(0xd26d23d2, 0x9c9cf16d),
  u(0xe03b92e0, 0x4949723b),
  u(0xb4c7abb4, 0xd8d81fc7),
  u(0xfa1543fa, 0xacacb915),
  u(0x709fd07, 0xf3f3fa09),
  u(0x256f8525, 0xcfcfa06f),
  u(0xafea8faf, 0xcaca20ea),
  u(0x8e89f38e, 0xf4f47d89),
  u(0xe9208ee9, 0x47476720),
  u(0x18282018, 0x10103828),
  u(0xd564ded5, 0x6f6f0b64),
  u(0x8883fb88, 0xf0f07383),
  u(0x6fb1946f, 0x4a4afbb1),
  u(0x7296b872, 0x5c5cca96),
  u(0x246c7024, 0x3838546c),
  u(0xf108aef1, 0x57575f08),
  u(0xc752e6c7, 0x73732152),
  u(0x51f33551, 0x979764f3),
  u(0x23658d23, 0xcbcbae65),
  u(0x7c84597c, 0xa1a12584),
  u(0x9cbfcb9c, 0xe8e857bf),
  u(0x21637c21, 0x3e3e5d63),
  u(0xdd7c37dd, 0x9696ea7c),
  u(0xdc7fc2dc, 0x61611e7f),
  u(0x86911a86, 0xd0d9c91),
  u(0x85941e85, 0xf0f9b94),
  u(0x90abdb90, 0xe0e04bab),
  u(0x42c6f842, 0x7c7cbac6),
  u(0xc457e2c4, 0x71712657),
  u(0xaae583aa, 0xcccc29e5),
  u(0xd8733bd8, 0x9090e373),
  u(0x50f0c05, 0x606090f),
  u(0x103f501, 0xf7f7f403),
  u(0x12363812, 0x1c1c2a36),
  u(0xa3fe9fa3, 0xc2c23cfe),
  u(0x5fe1d45f, 0x6a6a8be1),
  u(0xf91047f9, 0xaeaebe10),
  u(0xd06bd2d0, 0x6969026b),
  u(0x91a82e91, 0x1717bfa8),
  u(0x58e82958, 0x999971e8),
  u(0x27697427, 0x3a3a5369),
  u(0xb9d04eb9, 0x2727f7d0),
  u(0x3848a938, 0xd9d99148),
  u(0x1335cd13, 0xebebde35),
  u(0xb3ce56b3, 0x2b2be5ce),
  u(0x33554433, 0x22227755),
  u(0xbbd6bfbb, 0xd2d204d6),
  u(0x70904970, 0xa9a93990),
  u(0x89800e89, 0x7078780),
  u(0xa7f266a7, 0x3333c1f2),
  u(0xb6c15ab6, 0x2d2decc1),
  u(0x22667822, 0x3c3c5a66),
  u(0x92ad2a92, 0x1515b8ad),
  u(0x20608920, 0xc9c9a960),
  u(0x49db1549, 0x87875cdb),
  u(0xff1a4fff, 0xaaaab01a),
  u(0x7888a078, 0x5050d888),
  u(0x7a8e517a, 0xa5a52b8e),
  u(0x8f8a068f, 0x303898a),
  u(0xf813b2f8, 0x59594a13),
  u(0x809b1280, 0x909929b),
  u(0x17393417, 0x1a1a2339),
  u(0xda75cada, 0x65651075),
  u(0x3153b531, 0xd7d78453),
  u(0xc65113c6, 0x8484d551),
  u(0xb8d3bbb8, 0xd0d003d3),
  u(0xc35e1fc3, 0x8282dc5e),
  u(0xb0cb52b0, 0x2929e2cb),
  u(0x7799b477, 0x5a5ac399),
  u(0x11333c11, 0x1e1e2d33),
  u(0xcb46f6cb, 0x7b7b3d46),
  u(0xfc1f4bfc, 0xa8a8b71f),
  u(0xd661dad6, 0x6d6d0c61),
  u(0x3a4e583a, 0x2c2c624e),
];

const T6 = [
  u(0xf4a5f497, 0xa5c6c632),
  u(0x978497eb, 0x84f8f86f),
  u(0xb099b0c7, 0x99eeee5e),
  u(0x8c8d8cf7, 0x8df6f67a),
  u(0x170d17e5, 0xdffffe8),
  u(0xdcbddcb7, 0xbdd6d60a),
  u(0xc8b1c8a7, 0xb1dede16),
  u(0xfc54fc39, 0x5491916d),
  u(0xf050f0c0, 0x50606090),
  u(0x5030504, 0x3020207),
  u(0xe0a9e087, 0xa9cece2e),
  u(0x877d87ac, 0x7d5656d1),
  u(0x2b192bd5, 0x19e7e7cc),
  u(0xa662a671, 0x62b5b513),
  u(0x31e6319a, 0xe64d4d7c),
  u(0xb59ab5c3, 0x9aecec59),
  u(0xcf45cf05, 0x458f8f40),
  u(0xbc9dbc3e, 0x9d1f1fa3),
  u(0xc040c009, 0x40898949),
  u(0x928792ef, 0x87fafa68),
  u(0x3f153fc5, 0x15efefd0),
  u(0x26eb267f, 0xebb2b294),
  u(0x40c94007, 0xc98e8ece),
  u(0x1d0b1ded, 0xbfbfbe6),
  u(0x2fec2f82, 0xec41416e),
  u(0xa967a97d, 0x67b3b31a),
  u(0x1cfd1cbe, 0xfd5f5f43),
  u(0x25ea258a, 0xea454560),
  u(0xdabfda46, 0xbf2323f9),
  u(0x2f702a6, 0xf7535351),
  u(0xa196a1d3, 0x96e4e445),
  u(0xed5bed2d, 0x5b9b9b76),
  u(0x5dc25dea, 0xc2757528),
  u(0x241c24d9, 0x1ce1e1c5),
  u(0xe9aee97a, 0xae3d3dd4),
  u(0xbe6abe98, 0x6a4c4cf2),
  u(0xee5aeed8, 0x5a6c6c82),
  u(0xc341c3fc, 0x417e7ebd),
  u(0x60206f1, 0x2f5f5f3),
  u(0xd14fd11d, 0x4f838352),
  u(0xe45ce4d0, 0x5c68688c),
  u(0x7f407a2, 0xf4515156),
  u(0x5c345cb9, 0x34d1d18d),
  u(0x180818e9, 0x8f9f9e1),
  u(0xae93aedf, 0x93e2e24c),
  u(0x9573954d, 0x73abab3e),
  u(0xf553f5c4, 0x53626297),
  u(0x413f4154, 0x3f2a2a6b),
  u(0x140c1410, 0xc08081c),
  u(0xf652f631, 0x52959563),
  u(0xaf65af8c, 0x654646e9),
  u(0xe25ee221, 0x5e9d9d7f),
  u(0x78287860, 0x28303048),
  u(0xf8a1f86e, 0xa13737cf),
  u(0x110f1114, 0xf0a0a1b),
  u(0xc4b5c45e, 0xb52f2feb),
  u(0x1b091b1c, 0x90e0e15),
  u(0x5a365a48, 0x3624247e),
  u(0xb69bb636, 0x9b1b1bad),
  u(0x473d47a5, 0x3ddfdf98),
  u(0x6a266a81, 0x26cdcda7),
  u(0xbb69bb9c, 0x694e4ef5),
  u(0x4ccd4cfe, 0xcd7f7f33),
  u(0xba9fbacf, 0x9feaea50),
  u(0x2d1b2d24, 0x1b12123f),
  u(0xb99eb93a, 0x9e1d1da4),
  u(0x9c749cb0, 0x745858c4),
  u(0x722e7268, 0x2e343446),
  u(0x772d776c, 0x2d363641),
  u(0xcdb2cda3, 0xb2dcdc11),
  u(0x29ee2973, 0xeeb4b49d),
  u(0x16fb16b6, 0xfb5b5b4d),
  u(0x1f60153, 0xf6a4a4a5),
  u(0xd74dd7ec, 0x4d7676a1),
  u(0xa361a375, 0x61b7b714),
  u(0x49ce49fa, 0xce7d7d34),
  u(0x8d7b8da4, 0x7b5252df),
  u(0x423e42a1, 0x3edddd9f),
  u(0x937193bc, 0x715e5ecd),
  u(0xa297a226, 0x971313b1),
  u(0x4f50457, 0xf5a6a6a2),
  u(0xb868b869, 0x68b9b901),
  u(0x0, 0x0),
  u(0x742c7499, 0x2cc1c1b5),
  u(0xa060a080, 0x604040e0),
  u(0x211f21dd, 0x1fe3e3c2),
  u(0x43c843f2, 0xc879793a),
  u(0x2ced2c77, 0xedb6b69a),
  u(0xd9bed9b3, 0xbed4d40d),
  u(0xca46ca01, 0x468d8d47),
  u(0x70d970ce, 0xd9676717),
  u(0xdd4bdde4, 0x4b7272af),
  u(0x79de7933, 0xde9494ed),
  u(0x67d4672b, 0xd49898ff),
  u(0x23e8237b, 0xe8b0b093),
  u(0xde4ade11, 0x4a85855b),
  u(0xbd6bbd6d, 0x6bbbbb06),
  u(0x7e2a7e91, 0x2ac5c5bb),
  u(0x34e5349e, 0xe54f4f7b),
  u(0x3a163ac1, 0x16ededd7),
  u(0x54c55417, 0xc58686d2),
  u(0x62d7622f, 0xd79a9af8),
  u(0xff55ffcc, 0x55666699),
  u(0xa794a722, 0x941111b6),
  u(0x4acf4a0f, 0xcf8a8ac0),
  u(0x301030c9, 0x10e9e9d9),
  u(0xa060a08, 0x604040e),
  u(0x988198e7, 0x81fefe66),
  u(0xbf00b5b, 0xf0a0a0ab),
  u(0xcc44ccf0, 0x447878b4),
  u(0xd5bad54a, 0xba2525f0),
  u(0x3ee33e96, 0xe34b4b75),
  u(0xef30e5f, 0xf3a2a2ac),
  u(0x19fe19ba, 0xfe5d5d44),
  u(0x5bc05b1b, 0xc08080db),
  u(0x858a850a, 0x8a050580),
  u(0xecadec7e, 0xad3f3fd3),
  u(0xdfbcdf42, 0xbc2121fe),
  u(0xd848d8e0, 0x487070a8),
  u(0xc040cf9, 0x4f1f1fd),
  u(0x7adf7ac6, 0xdf636319),
  u(0x58c158ee, 0xc177772f),
  u(0x9f759f45, 0x75afaf30),
  u(0xa563a584, 0x634242e7),
  u(0x50305040, 0x30202070),
  u(0x2e1a2ed1, 0x1ae5e5cb),
  u(0x120e12e1, 0xefdfdef),
  u(0xb76db765, 0x6dbfbf08),
  u(0xd44cd419, 0x4c818155),
  u(0x3c143c30, 0x14181824),
  u(0x5f355f4c, 0x35262679),
  u(0x712f719d, 0x2fc3c3b2),
  u(0x38e13867, 0xe1bebe86),
  u(0xfda2fd6a, 0xa23535c8),
  u(0x4fcc4f0b, 0xcc8888c7),
  u(0x4b394b5c, 0x392e2e65),
  u(0xf957f93d, 0x5793936a),
  u(0xdf20daa, 0xf2555558),
  u(0x9d829de3, 0x82fcfc61),
  u(0xc947c9f4, 0x477a7ab3),
  u(0xefacef8b, 0xacc8c827),
  u(0x32e7326f, 0xe7baba88),
  u(0x7d2b7d64, 0x2b32324f),
  u(0xa495a4d7, 0x95e6e642),
  u(0xfba0fb9b, 0xa0c0c03b),
  u(0xb398b332, 0x981919aa),
  u(0x68d16827, 0xd19e9ef6),
  u(0x817f815d, 0x7fa3a322),
  u(0xaa66aa88, 0x664444ee),
  u(0x827e82a8, 0x7e5454d6),
  u(0xe6abe676, 0xab3b3bdd),
  u(0x9e839e16, 0x830b0b95),
  u(0x45ca4503, 0xca8c8cc9),
  u(0x7b297b95, 0x29c7c7bc),
  u(0x6ed36ed6, 0xd36b6b05),
  u(0x443c4450, 0x3c28286c),
  u(0x8b798b55, 0x79a7a72c),
  u(0x3de23d63, 0xe2bcbc81),
  u(0x271d272c, 0x1d161631),
  u(0x9a769a41, 0x76adad37),
  u(0x4d3b4dad, 0x3bdbdb96),
  u(0xfa56fac8, 0x5664649e),
  u(0xd24ed2e8, 0x4e7474a6),
  u(0x221e2228, 0x1e141436),
  u(0x76db763f, 0xdb9292e4),
  u(0x1e0a1e18, 0xa0c0c12),
  u(0xb46cb490, 0x6c4848fc),
  u(0x37e4376b, 0xe4b8b88f),
  u(0xe75de725, 0x5d9f9f78),
  u(0xb26eb261, 0x6ebdbd0f),
  u(0x2aef2a86, 0xef434369),
  u(0xf1a6f193, 0xa6c4c435),
  u(0xe3a8e372, 0xa83939da),
  u(0xf7a4f762, 0xa43131c6),
  u(0x593759bd, 0x37d3d38a),
  u(0x868b86ff, 0x8bf2f274),
  u(0x563256b1, 0x32d5d583),
  u(0xc543c50d, 0x438b8b4e),
  u(0xeb59ebdc, 0x596e6e85),
  u(0xc2b7c2af, 0xb7dada18),
  u(0x8f8c8f02, 0x8c01018e),
  u(0xac64ac79, 0x64b1b11d),
  u(0x6dd26d23, 0xd29c9cf1),
  u(0x3be03b92, 0xe0494972),
  u(0xc7b4c7ab, 0xb4d8d81f),
  u(0x15fa1543, 0xfaacacb9),
  u(0x90709fd, 0x7f3f3fa),
  u(0x6f256f85, 0x25cfcfa0),
  u(0xeaafea8f, 0xafcaca20),
  u(0x898e89f3, 0x8ef4f47d),
  u(0x20e9208e, 0xe9474767),
  u(0x28182820, 0x18101038),
  u(0x64d564de, 0xd56f6f0b),
  u(0x838883fb, 0x88f0f073),
  u(0xb16fb194, 0x6f4a4afb),
  u(0x967296b8, 0x725c5cca),
  u(0x6c246c70, 0x24383854),
  u(0x8f108ae, 0xf157575f),
  u(0x52c752e6, 0xc7737321),
  u(0xf351f335, 0x51979764),
  u(0x6523658d, 0x23cbcbae),
  u(0x847c8459, 0x7ca1a125),
  u(0xbf9cbfcb, 0x9ce8e857),
  u(0x6321637c, 0x213e3e5d),
  u(0x7cdd7c37, 0xdd9696ea),
  u(0x7fdc7fc2, 0xdc61611e),
  u(0x9186911a, 0x860d0d9c),
  u(0x9485941e, 0x850f0f9b),
  u(0xab90abdb, 0x90e0e04b),
  u(0xc642c6f8, 0x427c7cba),
  u(0x57c457e2, 0xc4717126),
  u(0xe5aae583, 0xaacccc29),
  u(0x73d8733b, 0xd89090e3),
  u(0xf050f0c, 0x5060609),
  u(0x30103f5, 0x1f7f7f4),
  u(0x36123638, 0x121c1c2a),
  u(0xfea3fe9f, 0xa3c2c23c),
  u(0xe15fe1d4, 0x5f6a6a8b),
  u(0x10f91047, 0xf9aeaebe),
  u(0x6bd06bd2, 0xd0696902),
  u(0xa891a82e, 0x911717bf),
  u(0xe858e829, 0x58999971),
  u(0x69276974, 0x273a3a53),
  u(0xd0b9d04e, 0xb92727f7),
  u(0x483848a9, 0x38d9d991),
  u(0x351335cd, 0x13ebebde),
  u(0xceb3ce56, 0xb32b2be5),
  u(0x55335544, 0x33222277),
  u(0xd6bbd6bf, 0xbbd2d204),
  u(0x90709049, 0x70a9a939),
  u(0x8089800e, 0x89070787),
  u(0xf2a7f266, 0xa73333c1),
  u(0xc1b6c15a, 0xb62d2dec),
  u(0x66226678, 0x223c3c5a),
  u(0xad92ad2a, 0x921515b8),
  u(0x60206089, 0x20c9c9a9),
  u(0xdb49db15, 0x4987875c),
  u(0x1aff1a4f, 0xffaaaab0),
  u(0x887888a0, 0x785050d8),
  u(0x8e7a8e51, 0x7aa5a52b),
  u(0x8a8f8a06, 0x8f030389),
  u(0x13f813b2, 0xf859594a),
  u(0x9b809b12, 0x80090992),
  u(0x39173934, 0x171a1a23),
  u(0x75da75ca, 0xda656510),
  u(0x533153b5, 0x31d7d784),
  u(0x51c65113, 0xc68484d5),
  u(0xd3b8d3bb, 0xb8d0d003),
  u(0x5ec35e1f, 0xc38282dc),
  u(0xcbb0cb52, 0xb02929e2),
  u(0x997799b4, 0x775a5ac3),
  u(0x3311333c, 0x111e1e2d),
  u(0x46cb46f6, 0xcb7b7b3d),
  u(0x1ffc1f4b, 0xfca8a8b7),
  u(0x61d661da, 0xd66d6d0c),
  u(0x4e3a4e58, 0x3a2c2c62),
];

const T7 = [
  u(0x32f4a5f4, 0x97a5c6c6),
  u(0x6f978497, 0xeb84f8f8),
  u(0x5eb099b0, 0xc799eeee),
  u(0x7a8c8d8c, 0xf78df6f6),
  u(0xe8170d17, 0xe50dffff),
  u(0xadcbddc, 0xb7bdd6d6),
  u(0x16c8b1c8, 0xa7b1dede),
  u(0x6dfc54fc, 0x39549191),
  u(0x90f050f0, 0xc0506060),
  u(0x7050305, 0x4030202),
  u(0x2ee0a9e0, 0x87a9cece),
  u(0xd1877d87, 0xac7d5656),
  u(0xcc2b192b, 0xd519e7e7),
  u(0x13a662a6, 0x7162b5b5),
  u(0x7c31e631, 0x9ae64d4d),
  u(0x59b59ab5, 0xc39aecec),
  u(0x40cf45cf, 0x5458f8f),
  u(0xa3bc9dbc, 0x3e9d1f1f),
  u(0x49c040c0, 0x9408989),
  u(0x68928792, 0xef87fafa),
  u(0xd03f153f, 0xc515efef),
  u(0x9426eb26, 0x7febb2b2),
  u(0xce40c940, 0x7c98e8e),
  u(0xe61d0b1d, 0xed0bfbfb),
  u(0x6e2fec2f, 0x82ec4141),
  u(0x1aa967a9, 0x7d67b3b3),
  u(0x431cfd1c, 0xbefd5f5f),
  u(0x6025ea25, 0x8aea4545),
  u(0xf9dabfda, 0x46bf2323),
  u(0x5102f702, 0xa6f75353),
  u(0x45a196a1, 0xd396e4e4),
  u(0x76ed5bed, 0x2d5b9b9b),
  u(0x285dc25d, 0xeac27575),
  u(0xc5241c24, 0xd91ce1e1),
  u(0xd4e9aee9, 0x7aae3d3d),
  u(0xf2be6abe, 0x986a4c4c),
  u(0x82ee5aee, 0xd85a6c6c),
  u(0xbdc341c3, 0xfc417e7e),
  u(0xf3060206, 0xf102f5f5),
  u(0x52d14fd1, 0x1d4f8383),
  u(0x8ce45ce4, 0xd05c6868),
  u(0x5607f407, 0xa2f45151),
  u(0x8d5c345c, 0xb934d1d1),
  u(0xe1180818, 0xe908f9f9),
  u(0x4cae93ae, 0xdf93e2e2),
  u(0x3e957395, 0x4d73abab),
  u(0x97f553f5, 0xc4536262),
  u(0x6b413f41, 0x543f2a2a),
  u(0x1c140c14, 0x100c0808),
  u(0x63f652f6, 0x31529595),
  u(0xe9af65af, 0x8c654646),
  u(0x7fe25ee2, 0x215e9d9d),
  u(0x48782878, 0x60283030),
  u(0xcff8a1f8, 0x6ea13737),
  u(0x1b110f11, 0x140f0a0a),
  u(0xebc4b5c4, 0x5eb52f2f),
  u(0x151b091b, 0x1c090e0e),
  u(0x7e5a365a, 0x48362424),
  u(0xadb69bb6, 0x369b1b1b),
  u(0x98473d47, 0xa53ddfdf),
  u(0xa76a266a, 0x8126cdcd),
  u(0xf5bb69bb, 0x9c694e4e),
  u(0x334ccd4c, 0xfecd7f7f),
  u(0x50ba9fba, 0xcf9feaea),
  u(0x3f2d1b2d, 0x241b1212),
  u(0xa4b99eb9, 0x3a9e1d1d),
  u(0xc49c749c, 0xb0745858),
  u(0x46722e72, 0x682e3434),
  u(0x41772d77, 0x6c2d3636),
  u(0x11cdb2cd, 0xa3b2dcdc),
  u(0x9d29ee29, 0x73eeb4b4),
  u(0x4d16fb16, 0xb6fb5b5b),
  u(0xa501f601, 0x53f6a4a4),
  u(0xa1d74dd7, 0xec4d7676),
  u(0x14a361a3, 0x7561b7b7),
  u(0x3449ce49, 0xface7d7d),
  u(0xdf8d7b8d, 0xa47b5252),
  u(0x9f423e42, 0xa13edddd),
  u(0xcd937193, 0xbc715e5e),
  u(0xb1a297a2, 0x26971313),
  u(0xa204f504, 0x57f5a6a6),
  u(0x1b868b8, 0x6968b9b9),
  u(0x0, 0x0),
  u(0xb5742c74, 0x992cc1c1),
  u(0xe0a060a0, 0x80604040),
  u(0xc2211f21, 0xdd1fe3e3),
  u(0x3a43c843, 0xf2c87979),
  u(0x9a2ced2c, 0x77edb6b6),
  u(0xdd9bed9, 0xb3bed4d4),
  u(0x47ca46ca, 0x1468d8d),
  u(0x1770d970, 0xced96767),
  u(0xafdd4bdd, 0xe44b7272),
  u(0xed79de79, 0x33de9494),
  u(0xff67d467, 0x2bd49898),
  u(0x9323e823, 0x7be8b0b0),
  u(0x5bde4ade, 0x114a8585),
  u(0x6bd6bbd, 0x6d6bbbbb),
  u(0xbb7e2a7e, 0x912ac5c5),
  u(0x7b34e534, 0x9ee54f4f),
  u(0xd73a163a, 0xc116eded),
  u(0xd254c554, 0x17c58686),
  u(0xf862d762, 0x2fd79a9a),
  u(0x99ff55ff, 0xcc556666),
  u(0xb6a794a7, 0x22941111),
  u(0xc04acf4a, 0xfcf8a8a),
  u(0xd9301030, 0xc910e9e9),
  u(0xe0a060a, 0x8060404),
  u(0x66988198, 0xe781fefe),
  u(0xab0bf00b, 0x5bf0a0a0),
  u(0xb4cc44cc, 0xf0447878),
  u(0xf0d5bad5, 0x4aba2525),
  u(0x753ee33e, 0x96e34b4b),
  u(0xac0ef30e, 0x5ff3a2a2),
  u(0x4419fe19, 0xbafe5d5d),
  u(0xdb5bc05b, 0x1bc08080),
  u(0x80858a85, 0xa8a0505),
  u(0xd3ecadec, 0x7ead3f3f),
  u(0xfedfbcdf, 0x42bc2121),
  u(0xa8d848d8, 0xe0487070),
  u(0xfd0c040c, 0xf904f1f1),
  u(0x197adf7a, 0xc6df6363),
  u(0x2f58c158, 0xeec17777),
  u(0x309f759f, 0x4575afaf),
  u(0xe7a563a5, 0x84634242),
  u(0x70503050, 0x40302020),
  u(0xcb2e1a2e, 0xd11ae5e5),
  u(0xef120e12, 0xe10efdfd),
  u(0x8b76db7, 0x656dbfbf),
  u(0x55d44cd4, 0x194c8181),
  u(0x243c143c, 0x30141818),
  u(0x795f355f, 0x4c352626),
  u(0xb2712f71, 0x9d2fc3c3),
  u(0x8638e138, 0x67e1bebe),
  u(0xc8fda2fd, 0x6aa23535),
  u(0xc74fcc4f, 0xbcc8888),
  u(0x654b394b, 0x5c392e2e),
  u(0x6af957f9, 0x3d579393),
  u(0x580df20d, 0xaaf25555),
  u(0x619d829d, 0xe382fcfc),
  u(0xb3c947c9, 0xf4477a7a),
  u(0x27efacef, 0x8bacc8c8),
  u(0x8832e732, 0x6fe7baba),
  u(0x4f7d2b7d, 0x642b3232),
  u(0x42a495a4, 0xd795e6e6),
  u(0x3bfba0fb, 0x9ba0c0c0),
  u(0xaab398b3, 0x32981919),
  u(0xf668d168, 0x27d19e9e),
  u(0x22817f81, 0x5d7fa3a3),
  u(0xeeaa66aa, 0x88664444),
  u(0xd6827e82, 0xa87e5454),
  u(0xdde6abe6, 0x76ab3b3b),
  u(0x959e839e, 0x16830b0b),
  u(0xc945ca45, 0x3ca8c8c),
  u(0xbc7b297b, 0x9529c7c7),
  u(0x56ed36e, 0xd6d36b6b),
  u(0x6c443c44, 0x503c2828),
  u(0x2c8b798b, 0x5579a7a7),
  u(0x813de23d, 0x63e2bcbc),
  u(0x31271d27, 0x2c1d1616),
  u(0x379a769a, 0x4176adad),
  u(0x964d3b4d, 0xad3bdbdb),
  u(0x9efa56fa, 0xc8566464),
  u(0xa6d24ed2, 0xe84e7474),
  u(0x36221e22, 0x281e1414),
  u(0xe476db76, 0x3fdb9292),
  u(0x121e0a1e, 0x180a0c0c),
  u(0xfcb46cb4, 0x906c4848),
  u(0x8f37e437, 0x6be4b8b8),
  u(0x78e75de7, 0x255d9f9f),
  u(0xfb26eb2, 0x616ebdbd),
  u(0x692aef2a, 0x86ef4343),
  u(0x35f1a6f1, 0x93a6c4c4),
  u(0xdae3a8e3, 0x72a83939),
  u(0xc6f7a4f7, 0x62a43131),
  u(0x8a593759, 0xbd37d3d3),
  u(0x74868b86, 0xff8bf2f2),
  u(0x83563256, 0xb132d5d5),
  u(0x4ec543c5, 0xd438b8b),
  u(0x85eb59eb, 0xdc596e6e),
  u(0x18c2b7c2, 0xafb7dada),
  u(0x8e8f8c8f, 0x28c0101),
  u(0x1dac64ac, 0x7964b1b1),
  u(0xf16dd26d, 0x23d29c9c),
  u(0x723be03b, 0x92e04949),
  u(0x1fc7b4c7, 0xabb4d8d8),
  u(0xb915fa15, 0x43faacac),
  u(0xfa090709, 0xfd07f3f3),
  u(0xa06f256f, 0x8525cfcf),
  u(0x20eaafea, 0x8fafcaca),
  u(0x7d898e89, 0xf38ef4f4),
  u(0x6720e920, 0x8ee94747),
  u(0x38281828, 0x20181010),
  u(0xb64d564, 0xded56f6f),
  u(0x73838883, 0xfb88f0f0),
  u(0xfbb16fb1, 0x946f4a4a),
  u(0xca967296, 0xb8725c5c),
  u(0x546c246c, 0x70243838),
  u(0x5f08f108, 0xaef15757),
  u(0x2152c752, 0xe6c77373),
  u(0x64f351f3, 0x35519797),
  u(0xae652365, 0x8d23cbcb),
  u(0x25847c84, 0x597ca1a1),
  u(0x57bf9cbf, 0xcb9ce8e8),
  u(0x5d632163, 0x7c213e3e),
  u(0xea7cdd7c, 0x37dd9696),
  u(0x1e7fdc7f, 0xc2dc6161),
  u(0x9c918691, 0x1a860d0d),
  u(0x9b948594, 0x1e850f0f),
  u(0x4bab90ab, 0xdb90e0e0),
  u(0xbac642c6, 0xf8427c7c),
  u(0x2657c457, 0xe2c47171),
  u(0x29e5aae5, 0x83aacccc),
  u(0xe373d873, 0x3bd89090),
  u(0x90f050f, 0xc050606),
  u(0xf4030103, 0xf501f7f7),
  u(0x2a361236, 0x38121c1c),
  u(0x3cfea3fe, 0x9fa3c2c2),
  u(0x8be15fe1, 0xd45f6a6a),
  u(0xbe10f910, 0x47f9aeae),
  u(0x26bd06b, 0xd2d06969),
  u(0xbfa891a8, 0x2e911717),
  u(0x71e858e8, 0x29589999),
  u(0x53692769, 0x74273a3a),
  u(0xf7d0b9d0, 0x4eb92727),
  u(0x91483848, 0xa938d9d9),
  u(0xde351335, 0xcd13ebeb),
  u(0xe5ceb3ce, 0x56b32b2b),
  u(0x77553355, 0x44332222),
  u(0x4d6bbd6, 0xbfbbd2d2),
  u(0x39907090, 0x4970a9a9),
  u(0x87808980, 0xe890707),
  u(0xc1f2a7f2, 0x66a73333),
  u(0xecc1b6c1, 0x5ab62d2d),
  u(0x5a662266, 0x78223c3c),
  u(0xb8ad92ad, 0x2a921515),
  u(0xa9602060, 0x8920c9c9),
  u(0x5cdb49db, 0x15498787),
  u(0xb01aff1a, 0x4fffaaaa),
  u(0xd8887888, 0xa0785050),
  u(0x2b8e7a8e, 0x517aa5a5),
  u(0x898a8f8a, 0x68f0303),
  u(0x4a13f813, 0xb2f85959),
  u(0x929b809b, 0x12800909),
  u(0x23391739, 0x34171a1a),
  u(0x1075da75, 0xcada6565),
  u(0x84533153, 0xb531d7d7),
  u(0xd551c651, 0x13c68484),
  u(0x3d3b8d3, 0xbbb8d0d0),
  u(0xdc5ec35e, 0x1fc38282),
  u(0xe2cbb0cb, 0x52b02929),
  u(0xc3997799, 0xb4775a5a),
  u(0x2d331133, 0x3c111e1e),
  u(0x3d46cb46, 0xf6cb7b7b),
  u(0xb71ffc1f, 0x4bfca8a8),
  u(0xc61d661, 0xdad66d6d),
  u(0x624e3a4e, 0x583a2c2c),
];

const j64: Array<u64> = [
  u(0, 0),
  u(0, 0x10),
  u(0, 0x20),
  u(0, 0x30),
  u(0, 0x40),
  u(0, 0x50),
  u(0, 0x60),
  u(0, 0x70),
  u(0, 0x80),
  u(0, 0x90),
  u(0, 0xa0),
  u(0, 0xb0),
  u(0, 0xc0),
  u(0, 0xd0),
  u(0, 0xe0),
  u(0, 0xf0),
];

const nj64: Array<u64> = [
  u(0xffffffff, 0xffffffff),
  u(0xffffffff, 0xffffffef),
  u(0xffffffff, 0xffffffdf),
  u(0xffffffff, 0xffffffcf),
  u(0xffffffff, 0xffffffbf),
  u(0xffffffff, 0xffffffaf),
  u(0xffffffff, 0xffffff9f),
  u(0xffffffff, 0xffffff8f),
  u(0xffffffff, 0xffffff7f),
  u(0xffffffff, 0xffffff6f),
  u(0xffffffff, 0xffffff5f),
  u(0xffffffff, 0xffffff4f),
  u(0xffffffff, 0xffffff3f),
  u(0xffffffff, 0xffffff2f),
  u(0xffffffff, 0xffffff1f),
  u(0xffffffff, 0xffffff0f),
];

const r64: Array<u64> = [
  u(0, 0),
  u(0, 1),
  u(0, 2),
  u(0, 3),
  u(0, 4),
  u(0, 5),
  u(0, 6),
  u(0, 7),
  u(0, 8),
  u(0, 9),
  u(0, 10),
  u(0, 11),
  u(0, 12),
  u(0, 13),
];

function bufferInsert(
  buffer: Array<u64>,
  bufferOffset: number,
  data: Array<u64>,
  len: number,
  dataOffset: number = 0
) {
  dataOffset = dataOffset | 0;
  let i = 0;
  while (i < len) {
    buffer[i + bufferOffset] = data[i + dataOffset];
    i++;
  }
}

function bufferInsert64(buffer: Array<u64>, bufferOffset: number, data: Array<u64>, len: number) {
  let i = 0;
  while (i < len) {
    buffer[i + bufferOffset] = data[i].clone();
    i++;
  }
}

function bufferSet(buffer: Array<u64>, bufferOffset: number, value: u64, len: number) {
  let i = 0;
  while (i < len) {
    buffer[i + bufferOffset] = value;
    i++;
  }
}

function B64(n: number, x: u64): number {
  if (n === 7) {
    return x.lo & 0xff;
  }
  const bits = (7 - n) * 8;
  if (bits >= 32) {
    //faster than >= 32
    return (x.hi >>> (bits - 32)) & 0xff;
  } else {
    const bitsOff32 = 32 - bits;
    const toMoveDown = (x.hi << bitsOff32) >>> bitsOff32; // was this.hi, not x.hi
    return ((x.lo >>> bits) | (toMoveDown << bitsOff32)) & 0xff;
  }
}

function u64ArrayToUint8Array(
  u64Array: number[],
  uint8Array: Uint8Array,
  size: number
): Uint8Array {
  u64Array.forEach((u64Val, index) => {
    if (index < size) {
      const baseIndex = index * 4;
      uint8Array[baseIndex] = (u64Val >>> 24) & 0xff;
      uint8Array[baseIndex + 1] = (u64Val >>> 16) & 0xff;
      uint8Array[baseIndex + 2] = (u64Val >>> 8) & 0xff;
      uint8Array[baseIndex + 3] = u64Val & 0xff;
    }
  });

  return uint8Array;
}

function createUint8Array(input: Uint8Array | string): Uint8Array {
  if (input instanceof Uint8Array) {
    // If the input is already a Uint8Array, return it as is
    return input;
  } else if (typeof input === 'string') {
    // If the input is a string, assume it's a hexadecimal string and convert it
    const bytes = new Uint8Array(input.length / 2);
    for (let i = 0, c = 0; c < input.length; i++, c += 2) {
      bytes[i] = parseInt(input.substr(c, 2), 16);
    }
    return bytes;
  } else {
    throw new Error('Input must be a Uint8Array or a hexadecimal string');
  }
}

// Groestl 512 hash but finish returns blockLen bytes
export abstract class GROESTL<T extends GROESTL<T>> extends Hash<T> {
  // For partial updates less than block size
  protected buffer: Uint8Array;
  protected finished = false;
  protected length = 0;
  protected pos = 0;
  protected destroyed = false;
  public blockLen: number;
  protected ctx: GroestlContext;

  protected constructor(
    public outputLen: number,
    readonly padOffset: number,
    readonly isLE: boolean
  ) {
    super();
    this.blockLen = 128;
    this.outputLen = outputLen;
    this.buffer = new Uint8Array(this.blockLen);
    this.ctx = new GroestlContext();
  }
  update(data: Input): this {
    exists(this);
    const newData = createUint8Array(data.slice());
    this.process(newData, data.length);
    return this;
  }
  digestInto(out: Uint8Array) {
    exists(this);
    output(out, this);
    this.finished = true;
    const finalizedHash = this.finish();
    u64ArrayToUint8Array(finalizedHash, out, this.outputLen);
  }
  digest() {
    const { buffer, outputLen } = this;
    this.digestInto(buffer);
    const res = buffer.slice(0, outputLen);
    this.destroy();
    return res;
  }
  _cloneInto(to?: T): T {
    to ||= new (this.constructor as any)() as T;
    to.ctx = new GroestlContext();
    to.ctx.state = this.ctx.state.map((u64val) => new u64(u64val.lo, u64val.hi));
    to.ctx.ptr = this.ctx.ptr;
    to.ctx.count = this.ctx.count;
    to.ctx.buffer = this.ctx.buffer.map((u64val) => new u64(u64val.lo, u64val.hi));

    const { blockLen, buffer, length, finished, destroyed, pos } = this;
    to.length = length;
    to.pos = pos;
    to.finished = finished;
    to.destroyed = destroyed;
    if (length % blockLen) to.buffer.set(buffer);
    return to;
  }

  destroy() {
    this.destroyed = true;
  }

  // groestl512 specific functions
  private static compress(int64buf: u64[], state: Array<u64>) {
    let g = new Array(16);
    let m = new Array(16);
    for (let u = 0; u < 16; u++) {
      m[u] = int64buf[u];
      g[u] = m[u].xor(state[u]);
    }
    let t = new Array(16);
    for (let r = 0; r < 14; r++) {
      for (let i = 0; i < 16; i++) {
        g[i].setxor64(j64[i].plus(r64[r]).setShiftLeft(56));
      }

      for (let u = 0; u < 16; u++) {
        t[u] = xor64(
          T0[B64(0, g[u])],
          T1[B64(1, g[(u + 1) & 0xf])],
          T2[B64(2, g[(u + 2) & 0xf])],
          T3[B64(3, g[(u + 3) & 0xf])],
          T4[B64(4, g[(u + 4) & 0xf])],
          T5[B64(5, g[(u + 5) & 0xf])],
          T6[B64(6, g[(u + 6) & 0xf])],
          T7[B64(7, g[(u + 11) & 0xf])]
        );
      }
      const temp = g;
      g = t;
      t = temp;
    }
    for (let r = 0; r < 14; r++) {
      for (let i = 0; i < 16; i++) {
        m[i].setxor64(r64[r], nj64[i]);
      }
      for (let u = 0; u < 16; u++) {
        t[u] = xor64(
          T0[B64(0, m[(u + 1) & 0xf])],
          T1[B64(1, m[(u + 3) & 0xf])],
          T2[B64(2, m[(u + 5) & 0xf])],
          T3[B64(3, m[(u + 11) & 0xf])],
          T4[B64(4, m[(u + 0) & 0xf])],
          T5[B64(5, m[(u + 2) & 0xf])],
          T6[B64(6, m[(u + 4) & 0xf])],
          T7[B64(7, m[(u + 6) & 0xf])]
        );
      }
      let temp = m;
      m = t;
      t = temp;
    }
    for (let u = 0; u < 16; u++) {
      state[u].setxor64(g[u], m[u]);
    }
  }

  private final(state: Array<u64>) {
    let u;
    let g = new Array(16);
    bufferInsert64(g, 0, state, 16);
    let t = new Array(16);
    for (var r = 0; r < 14; r++) {
      for (var i = 0; i < 16; i++) {
        g[i].setxor64(j64[i].plus(r64[r]).setShiftLeft(56));
      }

      for (u = 0; u < 16; u++) {
        t[u] = xor64(
          T0[B64(0, g[u])],
          T1[B64(1, g[(u + 1) & 0xf])],
          T2[B64(2, g[(u + 2) & 0xf])],
          T3[B64(3, g[(u + 3) & 0xf])],
          T4[B64(4, g[(u + 4) & 0xf])],
          T5[B64(5, g[(u + 5) & 0xf])],
          T6[B64(6, g[(u + 6) & 0xf])],
          T7[B64(7, g[(u + 11) & 0xf])]
        );
      }
      const temp = g;
      g = t;
      t = temp;
    }
    for (u = 0; u < 16; u++) state[u].setxor64(g[u]);
  }

  process(data: any, len: number) {
    let buf, ptr;
    //create a local copy of states
    const V = new Array(16);
    buf = this.ctx.buffer;
    ptr = this.ctx.ptr;
    if (len < this.ctx.buffer.length - ptr) {
      bufferInsert(buf, ptr, data, data.length);
      ptr += data.length;
      this.ctx.ptr = ptr;
      return;
    }
    //perform a deep copy of current state
    bufferInsert(V, 0, this.ctx.state, 16);
    while (len > 0) {
      let clen = this.ctx.buffer.length - ptr;
      if (clen > len) clen = len;
      bufferInsert(buf, ptr, data, clen);
      ptr += clen;
      data = data.slice(clen);
      len -= clen;
      if (ptr === this.ctx.buffer.length) {
        const int64Buf = bytes2Int64Buffer(buf);
        GROESTL.compress(int64Buf, V);
        this.ctx.count.addOne();
        ptr = 0;
      }
    }
    this.ctx.state = V;
    this.ctx.ptr = ptr;
  }

  finish(): Array<number> {
    const ptr = this.ctx.ptr;
    const pad = new Array(136);
    let padLen;
    let count;
    pad[0] = 0x80;
    if (ptr < 120) {
      padLen = 128 - ptr;
      count = this.ctx.count.plus(new u64(0, 1));
    } else {
      padLen = 256 - ptr;
      count = this.ctx.count.plus(new u64(0, 2));
    }
    bufferSet(pad, 1, new u64(0, 0), padLen - 9);
    bufferEncode64(pad, padLen - 8, count);
    this.process(pad, padLen);
    this.final(this.ctx.state);
    const out = new Array(16);
    for (let u = 0, v = 8; u < 8; u++, v++) {
      out[2 * u] = this.ctx.state[v].hi;
      out[2 * u + 1] = this.ctx.state[v].lo;
    }
    return out;
  }
}
